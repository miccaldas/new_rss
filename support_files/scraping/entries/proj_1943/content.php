<p>Koen van Gilst / November 14, 20213 min readOne of the things I struggled with when I started out as a programmer was where to put my code.<br>It was not something I could easily find in tutorials and for a long time I wondered why everyone was so focused on how to get framework X to do Y, when all I wanted to know was where to put the code that does Y.Turns out that "where to put code" is one of the hard things in software engineering and there are no silver bullets.<br>That's part of the reason why there are so few easy tutorials on this subject.Most of the code structuring patterns out there (the MVC pattern or patterns recommended by libraries) make sense in their own way, but they often fail to tell you what to do in day-to-day cases.<br>For instance, when you have a simple utility function that's only used in one place, where should you put it? In the global  folder?Over the years I've learned that the following principle helps to structure code in way that's easy to understand and maintain: .This means that if you have a helper function that's specific for the feature you're writing in  it's a good idea to keep this function close at hand.<br>So put it either inside the  file or right next to it if you have several helper functions.<br>This way, when you have to change or understand the functionality of featureA, all the code you need is close by.For this blog post I've chosen  as a title, but it's more often called :The principle of proximity focuses on how well organised your code is with respect to readability and change.<br>Proximity implies that functions that are changed together are moved closer together.<br>Proximity is both a design principle and a heuristic for refactoring hotspots toward code that's easier to understand.— So think about the Proximity Principle the next time you're in doubt:Like I said at the beginning of this post: There are no silver bullets for structuring code.<br>And the proximity principle does not always tell you exactly where to put code.<br>But when you're in doubt it tells you to keep code close to where it's relevant -- until you've found a good reason not to do so anymore.Koen van Gilst / November 14, 20213 min readOne of the things I struggled with when I started out as a programmer was where to put my code.<br>It was not something I could easily find in tutorials and for a long time I wondered why everyone was so focused on how to get framework X to do Y, when all I wanted to know was where to put the code that does Y.Turns out that "where to put code" is one of the hard things in software engineering and there are no silver bullets.<br>That's part of the reason why there are so few easy tutorials on this subject.Most of the code structuring patterns out there (the MVC pattern or patterns recommended by libraries) make sense in their own way, but they often fail to tell you what to do in day-to-day cases.<br>For instance, when you have a simple utility function that's only used in one place, where should you put it? In the global  folder?Over the years I've learned that the following principle helps to structure code in way that's easy to understand and maintain: .This means that if you have a helper function that's specific for the feature you're writing in  it's a good idea to keep this function close at hand.<br>So put it either inside the  file or right next to it if you have several helper functions.<br>This way, when you have to change or understand the functionality of featureA, all the code you need is close by.For this blog post I've chosen  as a title, but it's more often called :The principle of proximity focuses on how well organised your code is with respect to readability and change.<br>Proximity implies that functions that are changed together are moved closer together.<br>Proximity is both a design principle and a heuristic for refactoring hotspots toward code that's easier to understand.— So think about the Proximity Principle the next time you're in doubt:Like I said at the beginning of this post: There are no silver bullets for structuring code.<br>And the proximity principle does not always tell you exactly where to put code.<br>But when you're in doubt it tells you to keep code close to where it's relevant -- until you've found a good reason not to do so anymore.Koen van Gilst / November 14, 20213 min readOne of the things I struggled with when I started out as a programmer was where to put my code.<br>It was not something I could easily find in tutorials and for a long time I wondered why everyone was so focused on how to get framework X to do Y, when all I wanted to know was where to put the code that does Y.Turns out that "where to put code" is one of the hard things in software engineering and there are no silver bullets.<br>That's part of the reason why there are so few easy tutorials on this subject.Most of the code structuring patterns out there (the MVC pattern or patterns recommended by libraries) make sense in their own way, but they often fail to tell you what to do in day-to-day cases.<br>For instance, when you have a simple utility function that's only used in one place, where should you put it? In the global  folder?Over the years I've learned that the following principle helps to structure code in way that's easy to understand and maintain: .This means that if you have a helper function that's specific for the feature you're writing in  it's a good idea to keep this function close at hand.<br>So put it either inside the  file or right next to it if you have several helper functions.<br>This way, when you have to change or understand the functionality of featureA, all the code you need is close by.For this blog post I've chosen  as a title, but it's more often called :The principle of proximity focuses on how well organised your code is with respect to readability and change.<br>Proximity implies that functions that are changed together are moved closer together.<br>Proximity is both a design principle and a heuristic for refactoring hotspots toward code that's easier to understand.— So think about the Proximity Principle the next time you're in doubt:Like I said at the beginning of this post: There are no silver bullets for structuring code.<br>And the proximity principle does not always tell you exactly where to put code.<br>But when you're in doubt it tells you to keep code close to where it's relevant -- until you've found a good reason not to do so anymore.</p>
