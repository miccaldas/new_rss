[
{"title": "Using org-mode as an SQL playground", "links": "../../", "content": "Showcase video:", "images": []},
{"title": "Utilizing LSP", "links": "../../blog", "content": "For every web app I work on, a database client is always present for exploring data and building complex queries. Recently, I have moved on from my PgAdmin to org-mode for this purpose, because why not.", "images": []},
{"title": "Problems with this setup", "links": "../../poems", "content": "Org-mode allows executing code snippets and can show results in a nice tabular form. But org-mode isn\u2019t ", "images": []},
{"title": "missing", "links": "https://github.com/bitspook", "content": ". So it don\u2019t allow arbitrary code execution without our explicit consent. To tell org-mode that it is okay to execute SQL snippets, we need to run following elisp snippet:", "images": []},
{"title": "missing", "links": "https://www.cvedetails.com/vulnerability-list/vendor_id-26/product_id-320/Microsoft-Office.html", "content": "Org-mode has a number of ", "images": []},
{"title": "missing", "links": "https://www.orgmode.org/worg/org-contrib/babel/languages/ob-doc-sql.html#org7f0941b", "content": " which can be used to configure how a particular SQL source-code snippet is executed. Most important ones perhaps are:", "images": []},
{"title": "missing", "links": "https://www.postgresql.org/docs/current/libpq-envars.html", "content": "By default org-mode runs the code snippets in current OS environment. I use this fact to get the ability to run SQL against our postgres database without passing most of the above arguments. Postgres allows setting ", "images": []},
{"title": "missing", "links": "https://github.com/bitspook/entropy/blob/ae5ee52646c2c67ce713938548d67a722b73a294/flake.nix", "content": " variables, which it then use to for making connections by default. In my ", "images": []},
{"title": "missing", "links": "https://raw.githubusercontent.com/bitspook/entropy/96cc9c0485d972ed819996d61c3730cafb228660/sql-playground.org", "content": " file, I setup the required environment variables:", "images": []},
{"title": "missing", "links": "https://github.com/bitspook/entropy/commit/96cc9c0485d972ed819996d61c3730cafb228660", "content": "With this, only header option left to set is ", "images": []},
{"title": "missing", "links": "https://github.com/lighttiger2505/sqls/", "content": ", which I prefer to configure globally for my ", "images": []},
{"title": "missing", "links": "https://github.com/bitspook/entropy/blob/96cc9c0485d972ed819996d61c3730cafb228660/.dir-locals.el", "content": " since I usually have one database for my personal projects. You can check this ", "images": []},
{"title": "missing", "links": "https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html", "content": " for how I have setup my sql-playground there. Following snippet on top of the sql-playground.org does the trick:", "images": []},
{"title": "missing", "links": "https://emacs-lsp.github.io/lsp-mode/manual-language-docs/lsp-org/#", "content": "Now any SQL snippets that we create can be executed against our development database right within the org file. For example, pressing ", "images": []},
{"title": "missing", "links": "https://github.com/emacs-lsp/lsp-mode/issues/2525", "content": " in following SQL block produces output shown below that.", "images": []},
{"title": "missing", "links": "missing", "content": "Building SQL queries is my primary use-case, and org-mode configured so far serves that purpose. But since I am putting all this effort in writing this blog post anyway, I thought let\u2019s go a step further and try configuring LSP mode for SQL snippets in my org file. To my surprise, it is possible. ", "images": []},
{"title": "missing", "links": "missing", "content": " provides an LSP server for SQL files, which once configured can provide certain features like auto-completing table and column names. I have created a ", "images": []},
{"title": "missing", "links": "missing", "content": " file for ", "images": []},
{"title": "missing", "links": "missing", "content": " to configure LSP to connect to correct database.", "images": []},
{"title": "missing", "links": "missing", "content": "This snippet isn\u2019t actually the right way configuring directory local variables, becuase it sets ", "images": []},
{"title": "missing", "links": "missing", "content": " globally. This is the result of me time-boxing the task of evaluating ", "images": []},
{"title": "missing", "links": "missing", "content": ", so I won\u2019t need to duplicate my database configuration here.", "images": []},
{"title": "missing", "links": "missing", "content": "LSP for org-mode also need to provide a file to which it can tangle source blocks. So I added another snippet to top of my org file.", "images": []},
{"title": "missing", "links": "missing", "content": "I can now run ", "images": []},
{"title": "missing", "links": "missing", "content": " in an SQL block, and 8/10 times it has lsp configured properly. It isn\u2019t flawless though, but that is expected since ", "images": []},
{"title": "missing", "links": "missing", "content": " is in alpha stage right now.", "images": []},
{"title": "missing", "links": "missing", "content": "I also tried setting up lsp support in edit buffer for SQL statements (which you get by pressing ", "images": []},
{"title": "missing", "links": "missing", "content": " in org src blocks), but because of a ", "images": []},
{"title": "missing", "links": "missing", "content": ", that didn\u2019t work out too well.", "images": []},
{"title": "missing", "links": "missing", "content": "There are 2 main problems I face during my primary use-case.", "images": []}
][
{"title": "Using org-mode as an SQL playground", "links": "../../", "content": "Showcase video:", "images": []},
{"title": "Utilizing LSP", "links": "../../blog", "content": "For every web app I work on, a database client is always present for exploring data and building complex queries. Recently, I have moved on from my PgAdmin to org-mode for this purpose, because why not.", "images": []},
{"title": "Problems with this setup", "links": "../../poems", "content": "Org-mode allows executing code snippets and can show results in a nice tabular form. But org-mode isn\u2019t ", "images": []},
{"title": "missing", "links": "https://github.com/bitspook", "content": ". So it don\u2019t allow arbitrary code execution without our explicit consent. To tell org-mode that it is okay to execute SQL snippets, we need to run following elisp snippet:", "images": []},
{"title": "missing", "links": "https://www.cvedetails.com/vulnerability-list/vendor_id-26/product_id-320/Microsoft-Office.html", "content": "Org-mode has a number of ", "images": []},
{"title": "missing", "links": "https://www.orgmode.org/worg/org-contrib/babel/languages/ob-doc-sql.html#org7f0941b", "content": " which can be used to configure how a particular SQL source-code snippet is executed. Most important ones perhaps are:", "images": []},
{"title": "missing", "links": "https://www.postgresql.org/docs/current/libpq-envars.html", "content": "By default org-mode runs the code snippets in current OS environment. I use this fact to get the ability to run SQL against our postgres database without passing most of the above arguments. Postgres allows setting ", "images": []},
{"title": "missing", "links": "https://github.com/bitspook/entropy/blob/ae5ee52646c2c67ce713938548d67a722b73a294/flake.nix", "content": " variables, which it then use to for making connections by default. In my ", "images": []},
{"title": "missing", "links": "https://raw.githubusercontent.com/bitspook/entropy/96cc9c0485d972ed819996d61c3730cafb228660/sql-playground.org", "content": " file, I setup the required environment variables:", "images": []},
{"title": "missing", "links": "https://github.com/bitspook/entropy/commit/96cc9c0485d972ed819996d61c3730cafb228660", "content": "With this, only header option left to set is ", "images": []},
{"title": "missing", "links": "https://github.com/lighttiger2505/sqls/", "content": ", which I prefer to configure globally for my ", "images": []},
{"title": "missing", "links": "https://github.com/bitspook/entropy/blob/96cc9c0485d972ed819996d61c3730cafb228660/.dir-locals.el", "content": " since I usually have one database for my personal projects. You can check this ", "images": []},
{"title": "missing", "links": "https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html", "content": " for how I have setup my sql-playground there. Following snippet on top of the sql-playground.org does the trick:", "images": []},
{"title": "missing", "links": "https://emacs-lsp.github.io/lsp-mode/manual-language-docs/lsp-org/#", "content": "Now any SQL snippets that we create can be executed against our development database right within the org file. For example, pressing ", "images": []},
{"title": "missing", "links": "https://github.com/emacs-lsp/lsp-mode/issues/2525", "content": " in following SQL block produces output shown below that.", "images": []},
{"title": "missing", "links": "missing", "content": "Building SQL queries is my primary use-case, and org-mode configured so far serves that purpose. But since I am putting all this effort in writing this blog post anyway, I thought let\u2019s go a step further and try configuring LSP mode for SQL snippets in my org file. To my surprise, it is possible. ", "images": []},
{"title": "missing", "links": "missing", "content": " provides an LSP server for SQL files, which once configured can provide certain features like auto-completing table and column names. I have created a ", "images": []},
{"title": "missing", "links": "missing", "content": " file for ", "images": []},
{"title": "missing", "links": "missing", "content": " to configure LSP to connect to correct database.", "images": []},
{"title": "missing", "links": "missing", "content": "This snippet isn\u2019t actually the right way configuring directory local variables, becuase it sets ", "images": []},
{"title": "missing", "links": "missing", "content": " globally. This is the result of me time-boxing the task of evaluating ", "images": []},
{"title": "missing", "links": "missing", "content": ", so I won\u2019t need to duplicate my database configuration here.", "images": []},
{"title": "missing", "links": "missing", "content": "LSP for org-mode also need to provide a file to which it can tangle source blocks. So I added another snippet to top of my org file.", "images": []},
{"title": "missing", "links": "missing", "content": "I can now run ", "images": []},
{"title": "missing", "links": "missing", "content": " in an SQL block, and 8/10 times it has lsp configured properly. It isn\u2019t flawless though, but that is expected since ", "images": []},
{"title": "missing", "links": "missing", "content": " is in alpha stage right now.", "images": []},
{"title": "missing", "links": "missing", "content": "I also tried setting up lsp support in edit buffer for SQL statements (which you get by pressing ", "images": []},
{"title": "missing", "links": "missing", "content": " in org src blocks), but because of a ", "images": []},
{"title": "missing", "links": "missing", "content": ", that didn\u2019t work out too well.", "images": []},
{"title": "missing", "links": "missing", "content": "There are 2 main problems I face during my primary use-case.", "images": []}
]