[
{"title": "Rails is not written in Ruby", "links": "https://solnic.codes", "content": "I\u2019m born and raised in Krak\u00f3w, a beautiful city in Poland, maybe you\u2019ve heard about it, maybe you\u2019ve even been here. In Poland we speak Polish, which is a really difficult language, it\u2019s actually considered one of the top-10 most difficult languages to learn in the world. In Poland, just like in many other countries, there are regions where dialects are used rather than \u201cthe pure\u201d form of the language, and so in my city, we have our own dialect. It\u2019s not ", "images": []},
{"title": "To be continued!", "links": "https://solnic.codes/posts/", "content": " from Polish, but we have our special words, and a special way of saying certain words. For example, we say \u201cczy\u201d, which means \u201cthree\u201d, even though the correct form is \u201ctrzy\u201d, but we\u2019re like \u201cthat\u2019s too hard\u201d so we keep it simple, \u201cczydzie\u015bci czy\u201d (33) instead of \u201ctrzydzie\u015bci trzy\u201d. The rest of Poland is making fun of us because of this kind of stuff, but whatever, it\u2019s our dialect - this is how we like to speak.", "images": []},
{"title": "missing", "links": "https://solnic.codes/talks/", "content": "What does it have to do with Rails and Ruby though? Good question. Programming languages have dialects as well, by definition, a programming language dialect is \u201ca (relatively small) variation or extension of the language that does not change its intrinsic nature\u201d. It doesn\u2019t really matter how exactly such variation or extension is implemented. The important part is that the original language is extended and it provides more functionality, while it\u2019s original nature and behavior stay the same.", "images": []},
{"title": "missing", "links": "https://solnic.codes/open-source/", "content": "This brings us to Ruby - a programming language with open classes, where even the core functionality of the language can be ", "images": []},
{"title": "missing", "links": "https://solnic.codes/github-sponsors/", "content": " by simply adding new methods to core classes, like ", "images": []},
{"title": "missing", "links": "https://solnic.codes/about/", "content": " or ", "images": []},
{"title": "missing", "links": "https://solnic.codes/contact/", "content": ". This makes it very simple to create your own Ruby dialect!", "images": []},
{"title": "missing", "links": "#monopoly-for-monkey-patching", "content": "This unique feature of Ruby has been leveraged by DHH back when he created Ruby on Rails framework. The very foundation of this framework is a library called ActiveSupport - ", "images": []},
{"title": "missing", "links": "#ecosystem-wide-implications", "content": " collection of ", "images": []},
{"title": "missing", "links": "#but-many-methods-from-activesupport-are-now-in-ruby", "content": ", which together create ", "images": []},
{"title": "missing", "links": "#technical-and-design-implications", "content": ", an extended version of the Ruby language, which doesn\u2019t change it\u2019s intrinsic nature. Why is it a foundation of the framework, you may ask - the answer is very simple: everything would break if you tried to remove ActiveSupport from Rails.", "images": []},
{"title": "missing", "links": "#lack-of-composability", "content": "What does it actually mean if you take into consideration the entire Ruby ecosystem though?", "images": []},
{"title": "missing", "links": "#lack-of-encapsulation-and-unclear-boundaries", "content": "Monkey-patching is another way of saying that some piece of code alters an existing class by leveraging open classes in Ruby. The ActiveSupport library monkey-patches many classes, there are currently ", "images": []},
{"title": "missing", "links": "https://solnic.codes/2022/02/02/rails-is-not-written-in-ruby/#comment-5719695778", "content": " in its ", "images": []},
{"title": "missing", "links": "#naming-conflicts", "content": " directory. Here, I\u2019ve generated some stats:", "images": []},
{"title": "missing", "links": "#ok-so-whats-the-alternative", "content": "When you count them all, you get ", "images": []},
{"title": "missing", "links": "https://github.com/zverok/time_calc", "content": ".", "images": []},
{"title": "missing", "links": "#to-be-continued", "content": "Notice that I\u2019m only talking about the core extensions. I skipped classes from the stdlib! I also counted only public instance methods. It would be interesting to see how many class and private methods ActiveSupport adds. This would be a fun excercise.", "images": []},
{"title": "missing", "links": "https://hanamirb.org", "content": "When you have a library, a ruby gem, which adds such a significant amount of new methods to the core classes, it is important to understand that:", "images": []},
{"title": "missing", "links": "https://dry-rb.org", "content": "Some time ago, we had a lot of ruby gems that would also rely on monkey-patching. We even had a full-stack framework that was meant to compete with Rails. It was called Merb and it also had something like ActiveSupport, it was called extlib. As you probably guessed - it caused conflicts with ActiveSupport so it wasn\u2019t really feasible to use both libraries in the same codebase. Merb and Rails \u201cmerged\u201d into Rails 3 though, and that\u2019s how we don\u2019t have \u201can extlib problem\u201d anymore, because the library is gone. Over time, many Ruby developers working on various gems have learned the downsides of monkey-patching and simply stopped doing it. RSpec is our primary example here - a limited and problematic DSL based on monkey-patching was turned into a beautiful, composable DSL which we still have in RSpec.", "images": []},
{"title": "missing", "links": "https://solnic.codes/tags/ruby/", "content": "Unfortunately, even though majority of the gems stopped relying on monkey-patches, we still have ActiveSupport just because it\u2019s such a fundemental part of Rails. After all, the framework is written in ActiveSupport Ruby dialect!", "images": []},
{"title": "missing", "links": "https://solnic.codes/tags/rails/", "content": "Here\u2019s the crux of the problem though:", "images": []},
{"title": "missing", "links": "https://solnic.codes/tags/community/", "content": "an API which is implemented as part of a Ruby dialect looks \u201cnicer\u201d, more concise and natural", "images": []},
{"title": "missing", "links": "https://twitter.com/intent/tweet/?text=Rails%20is%20not%20written%20in%20Ruby&url=https%3a%2f%2fsolnic.codes%2f2022%2f02%2f02%2frails-is-not-written-in-ruby%2f&hashtags=ruby%2crails%2ccommunity", "content": "Why? Because it ", "images": []},
{"title": "missing", "links": "https://www.linkedin.com/shareArticle?mini=true&url=https%3a%2f%2fsolnic.codes%2f2022%2f02%2f02%2frails-is-not-written-in-ruby%2f&title=Rails%20is%20not%20written%20in%20Ruby&summary=Rails%20is%20not%20written%20in%20Ruby&source=https%3a%2f%2fsolnic.codes%2f2022%2f02%2f02%2frails-is-not-written-in-ruby%2f", "content": "! This is why things like ", "images": []},
{"title": "missing", "links": "https://reddit.com/submit?url=https%3a%2f%2fsolnic.codes%2f2022%2f02%2f02%2frails-is-not-written-in-ruby%2f&title=Rails%20is%20not%20written%20in%20Ruby", "content": " looks so \u201cnatural\u201d. Except that it\u2019s not Ruby - it\u2019s ActiveSupport.", "images": []},
{"title": "missing", "links": "https://facebook.com/sharer/sharer.php?u=https%3a%2f%2fsolnic.codes%2f2022%2f02%2f02%2frails-is-not-written-in-ruby%2f", "content": "When you think about it, you may realize that this is a huge advantage that Rails has over ", "images": []},
{"title": "missing", "links": "https://api.whatsapp.com/send?text=Rails%20is%20not%20written%20in%20Ruby%20-%20https%3a%2f%2fsolnic.codes%2f2022%2f02%2f02%2frails-is-not-written-in-ruby%2f", "content": " - it\u2019s got monopoly for monkey-patching.", "images": []},
{"title": "missing", "links": "https://telegram.me/share/url?text=Rails%20is%20not%20written%20in%20Ruby&url=https%3a%2f%2fsolnic.codes%2f2022%2f02%2f02%2frails-is-not-written-in-ruby%2f", "content": "For people like me, who are working on Ruby libraries, experiencing constant pushbacks and negative feedback every time you try to show how to approach certain problems is just daunting. It happens quite often that you show something now and all you hear is \u201cthat\u2019s too complicated\u201d. The reason why something seems to be \u201cmore complicated\u201d is that ", "images": []},
{"title": "missing", "links": "https://disqus.com/?ref_noscript", "content": ", with objects, and encapsulation of behavior&mldr;rather than chucking in whatever you want in any class that you happen to find useful.", "images": []},
{"title": "missing", "links": "https://disqus.com", "content": "! it was brought to my attention that this paragraph makes it seem like I\u2019m frustrated and creates an impression that the article is toxic as I\u2019m making Rails look bad - to clarify: I\u2019m not frustrated, far from it, sometimes I feel tired and lose motivation, but it\u2019s just \u201ca bad day\u201d. My intention with this paragraph was to express ", "images": []},
{"title": "missing", "links": "https://solnic.codes", "content": ", which is based on my past experience. My intention with the entire article was to ", "images": []},
{"title": "missing", "links": "https://gohugo.io/", "content": " what ActiveSupport actually is so that you can have some perspective, which I believe many people don\u2019t have. This is why discussing Ruby code is sometimes challenging, due to the lack of this perspective.", "images": []},
{"title": "missing", "links": "https://git.io/hugopapermod", "content": "If you consider the entire Ruby ecosystem, this is a real problem. First of all, you compete using plain Ruby with the ActiveSupport dialect - in most cases you\u2019ve lost before you even started coding, because most Ruby developers won\u2019t like whatever you\u2019re going to build. People have certain expectations from Ruby libraries and they are ", "images": []},
{"title": "missing", "links": "#top", "content": ".", "images": []},
{"title": "missing", "links": "missing", "content": "Another rather negative implication is that Rails, through ActiveSupport, has created a massive confusion about what is Ruby vs what is Ruby with ActiveSupport. This has never been a good thing. Trust me, there are people in other programming communities who dislike Ruby when in reality, they actually dislike Rails! People confuse the two all the time.", "images": []},
{"title": "missing", "links": "missing", "content": "Yes, and? This is not an argument that can justify monkey-patching. If you want to experiment with new methods, do it in isolation, in your own codebase. If you feel good about what you came up with - report an issue in the Ruby tracker suggesting a new method addition.", "images": []},
{"title": "missing", "links": "missing", "content": "This also goes back to what I previously mentioned: monopoly for monkey-patching. It\u2019s not OK that there\u2019s this one library with special treatment that can monkey-patch pretty much whatever and then some of its patches can end up in the language itself.", "images": []},
{"title": "missing", "links": "missing", "content": "I often mention that monkey-patching isn\u2019t even a sound technical solution, simply because you can\u2019t compose monkey-patches, there\u2019s lack of encapsulation and proper boundaries and, to make things worse, it can easily lead to naming conflicts. Let\u2019s break this down:", "images": []},
{"title": "missing", "links": "missing", "content": "Composability is a very powerful technique. In Ruby, it can be easily achieved by simply using objects. In functional language, you can simply compose functions. What does it mean to compose functionality? It just means that you take functionality X, and functionality Y, and you turn it into functionality Z which combines the two in such a way, that X and Y are hidden (which is called encapsulation, but I\u2019ll get to this part later).", "images": []},
{"title": "missing", "links": "missing", "content": "Here\u2019s why this doesn\u2019t work so well in case of ActiveSupport (and monkey-patching in general). Let\u2019s say you have a number and you want to format it, ActiveSupport provides a ", "images": []},
{"title": "missing", "links": "missing", "content": " method implemented as a Numeric core extension:", "images": []},
{"title": "missing", "links": "missing", "content": "Cool, right? So natural, look at this beautiful piece of ", "images": []},
{"title": "missing", "links": "missing", "content": " ActiveSupport dialect.", "images": []},
{"title": "missing", "links": "missing", "content": "Now, imagine that you need to preprocess the number somehow, maybe you need to trim it and remove some junk. What do you do?", "images": []},
{"title": "missing", "links": "missing", "content": "OK, you\u2019re still covered by Ruby and ActiveSupport, let\u2019s say you can live with this for some time but then you realize you need to validate the string (as you should) before doing anything with it. What do you do? This?:", "images": []},
{"title": "missing", "links": "missing", "content": "If you\u2019re shaking your head that it would be a bad idea then of course you\u2019re right, but guess what - ", "images": []},
{"title": "missing", "links": "missing", "content": "! In fact, I bet there are people who still do that! Overall, the consensus within the community ", "images": []},
{"title": "missing", "links": "missing", "content": " that it is indeed a bad idea and a massive code smell. Most experienced Ruby developers don\u2019t monkey-patch core classes anymore.", "images": []},
{"title": "missing", "links": "missing", "content": "Encapsulation is important because it allows you to achieve composability, pluggability, extensibility and in general makes your code much easier to work with. If boundaries are not clear, unrelated functionality gets mixed together either by an accident or simply by making bad design decisions (or not making any design decisions at all). Your code becomes less and less cohesive and as a result you will inevitably end up in misery.", "images": []},
{"title": "missing", "links": "missing", "content": "Numbers are primitive values, they shouldn\u2019t be coupled to details like phone formatting. Sure, it\u2019s convenient and looks cute but it comes with serious drawbacks. First of all ", "images": []},
{"title": "missing", "links": "missing", "content": ". There\u2019s a limit. Once you reach this limit, you will start implementing domain-specific functionality in a different way - this is where your code already starts losing cohesion and this is also how things become less composable. You\u2019re no longer chaining methods, you now have a separate abstraction to do more heavy work but it\u2019s not part of the Number API, because it would be too much.", "images": []},
{"title": "missing", "links": "missing", "content": "with monkey-patching approach you\u2019re making boundaries within your system less clear.", "images": []},
{"title": "missing", "links": "missing", "content": "This is a simple consequence of putting things in places where they don\u2019t belong. Monkey-patches like ", "images": []},
{"title": "missing", "links": "missing", "content": " are honestly just helpers, helpers attached to core classes. They are only needed in very specific places; however, they are provided globally due to the nature of monkey-patching! Every core object has these methods after all. This, in turn, makes it possible to reach out for them anywhere in your code base.", "images": []},
{"title": "missing", "links": "missing", "content": "! Please also see my comment ", "images": []},
{"title": "missing", "links": "missing", "content": "This is probably the most obvious drawback. If you throw encapsulation out of the window and assume that it\u2019s OK to monkey-patch, then it\u2019s easy to imagine a situation where two people come up with the same method name, implement them as a monkey-patch in the same class and now you have a problem.", "images": []},
{"title": "missing", "links": "missing", "content": "Let me remind you once again: we used to have plenty of gems shipping with monkey-patched core classes, it caused a lot of trouble, we\u2019ve stopped doing it because it was wrong. Simple.", "images": []},
{"title": "missing", "links": "missing", "content": "Ruby! For the love of Matz, the alternative is to just use Ruby. You can achieve ", "images": []},
{"title": "missing", "links": "missing", "content": " with this language without having to alter core classes. It\u2019s not just about core classes though. There are so many libraries out there that integrate with other libraries by&mldr;yes, by monkey-patching them. In a way, I see this as a result (a legacy?) of Rails and the mindset behind it. This is what we have learned to do, but we can do better.", "images": []},
{"title": "missing", "links": "missing", "content": "How can you achieve composability? You use object composition. It can be as simple as ", "images": []},
{"title": "missing", "links": "missing", "content": ". You don\u2019t want to write code like that? I know, me neither. That\u2019s why there are libraries with nice abstractions and DSLs. Go look around, they exist.", "images": []},
{"title": "missing", "links": "missing", "content": "Do take a look at RSpec\u2019s evolution. How it went from ", "images": []},
{"title": "missing", "links": "missing", "content": " to ", "images": []},
{"title": "missing", "links": "missing", "content": ". I don\u2019t think anybody misses the old syntax. I\u2019m sure there are more examples of such transitions, let me know if you remember them.", "images": []},
{"title": "missing", "links": "missing", "content": "If you think ActiveSupport\u2019s time helpers cannot be replaced, then take a look at ", "images": []},
{"title": "missing", "links": "missing", "content": " gem. There is a significant difference between composable time calculations vs a bunch of time helper methods attached to integers.", "images": []},
{"title": "missing", "links": "missing", "content": "I really wanted to provide some concrete examples but this would be too much. I\u2019m gonna publish this to get it out of my head but I\u2019m more than happy to keep discussing this subject, as you can see I\u2019m quite passionate about it \ud83d\ude09.", "images": []},
{"title": "missing", "links": "missing", "content": "For the time being, I would love if you checked out OSS libraries that me and many other people have been working on for years now. Things will be much simpler for me to just \u201cshow off\u201d once we\u2019re done with ", "images": []},
{"title": "missing", "links": "missing", "content": " final but for now, check out ", "images": []},
{"title": "missing", "links": "missing", "content": " - it\u2019s a great example how libraries can be implemented without monkey-patching, they are all composable and unobtrusive, so you can add them easily to an existing code base. You may also discover how well they play with other libraries!", "images": []},
{"title": "missing", "links": "missing", "content": "I\u2019m open to your feedback, questions and concerns (no pun intended!). I think I want to keep on working on this article, maybe turn it into a sticky page or something here. It\u2019s not the first time when I talk about this topic, and I actually really don\u2019t like to repeat myself, but I would like to have a single resource that I could simply point people to whenever I find myself complaining about ActiveSupport on Twitter again \ud83e\udd2d.", "images": []}
][
{"title": "Rails is not written in Ruby", "links": "https://solnic.codes", "content": "I\u2019m born and raised in Krak\u00f3w, a beautiful city in Poland, maybe you\u2019ve heard about it, maybe you\u2019ve even been here. In Poland we speak Polish, which is a really difficult language, it\u2019s actually considered one of the top-10 most difficult languages to learn in the world. In Poland, just like in many other countries, there are regions where dialects are used rather than \u201cthe pure\u201d form of the language, and so in my city, we have our own dialect. It\u2019s not ", "images": []},
{"title": "To be continued!", "links": "https://solnic.codes/posts/", "content": " from Polish, but we have our special words, and a special way of saying certain words. For example, we say \u201cczy\u201d, which means \u201cthree\u201d, even though the correct form is \u201ctrzy\u201d, but we\u2019re like \u201cthat\u2019s too hard\u201d so we keep it simple, \u201cczydzie\u015bci czy\u201d (33) instead of \u201ctrzydzie\u015bci trzy\u201d. The rest of Poland is making fun of us because of this kind of stuff, but whatever, it\u2019s our dialect - this is how we like to speak.", "images": []},
{"title": "missing", "links": "https://solnic.codes/talks/", "content": "What does it have to do with Rails and Ruby though? Good question. Programming languages have dialects as well, by definition, a programming language dialect is \u201ca (relatively small) variation or extension of the language that does not change its intrinsic nature\u201d. It doesn\u2019t really matter how exactly such variation or extension is implemented. The important part is that the original language is extended and it provides more functionality, while it\u2019s original nature and behavior stay the same.", "images": []},
{"title": "missing", "links": "https://solnic.codes/open-source/", "content": "This brings us to Ruby - a programming language with open classes, where even the core functionality of the language can be ", "images": []},
{"title": "missing", "links": "https://solnic.codes/github-sponsors/", "content": " by simply adding new methods to core classes, like ", "images": []},
{"title": "missing", "links": "https://solnic.codes/about/", "content": " or ", "images": []},
{"title": "missing", "links": "https://solnic.codes/contact/", "content": ". This makes it very simple to create your own Ruby dialect!", "images": []},
{"title": "missing", "links": "#monopoly-for-monkey-patching", "content": "This unique feature of Ruby has been leveraged by DHH back when he created Ruby on Rails framework. The very foundation of this framework is a library called ActiveSupport - ", "images": []},
{"title": "missing", "links": "#ecosystem-wide-implications", "content": " collection of ", "images": []},
{"title": "missing", "links": "#but-many-methods-from-activesupport-are-now-in-ruby", "content": ", which together create ", "images": []},
{"title": "missing", "links": "#technical-and-design-implications", "content": ", an extended version of the Ruby language, which doesn\u2019t change it\u2019s intrinsic nature. Why is it a foundation of the framework, you may ask - the answer is very simple: everything would break if you tried to remove ActiveSupport from Rails.", "images": []},
{"title": "missing", "links": "#lack-of-composability", "content": "What does it actually mean if you take into consideration the entire Ruby ecosystem though?", "images": []},
{"title": "missing", "links": "#lack-of-encapsulation-and-unclear-boundaries", "content": "Monkey-patching is another way of saying that some piece of code alters an existing class by leveraging open classes in Ruby. The ActiveSupport library monkey-patches many classes, there are currently ", "images": []},
{"title": "missing", "links": "https://solnic.codes/2022/02/02/rails-is-not-written-in-ruby/#comment-5719695778", "content": " in its ", "images": []},
{"title": "missing", "links": "#naming-conflicts", "content": " directory. Here, I\u2019ve generated some stats:", "images": []},
{"title": "missing", "links": "#ok-so-whats-the-alternative", "content": "When you count them all, you get ", "images": []},
{"title": "missing", "links": "https://github.com/zverok/time_calc", "content": ".", "images": []},
{"title": "missing", "links": "#to-be-continued", "content": "Notice that I\u2019m only talking about the core extensions. I skipped classes from the stdlib! I also counted only public instance methods. It would be interesting to see how many class and private methods ActiveSupport adds. This would be a fun excercise.", "images": []},
{"title": "missing", "links": "https://hanamirb.org", "content": "When you have a library, a ruby gem, which adds such a significant amount of new methods to the core classes, it is important to understand that:", "images": []},
{"title": "missing", "links": "https://dry-rb.org", "content": "Some time ago, we had a lot of ruby gems that would also rely on monkey-patching. We even had a full-stack framework that was meant to compete with Rails. It was called Merb and it also had something like ActiveSupport, it was called extlib. As you probably guessed - it caused conflicts with ActiveSupport so it wasn\u2019t really feasible to use both libraries in the same codebase. Merb and Rails \u201cmerged\u201d into Rails 3 though, and that\u2019s how we don\u2019t have \u201can extlib problem\u201d anymore, because the library is gone. Over time, many Ruby developers working on various gems have learned the downsides of monkey-patching and simply stopped doing it. RSpec is our primary example here - a limited and problematic DSL based on monkey-patching was turned into a beautiful, composable DSL which we still have in RSpec.", "images": []},
{"title": "missing", "links": "https://solnic.codes/tags/ruby/", "content": "Unfortunately, even though majority of the gems stopped relying on monkey-patches, we still have ActiveSupport just because it\u2019s such a fundemental part of Rails. After all, the framework is written in ActiveSupport Ruby dialect!", "images": []},
{"title": "missing", "links": "https://solnic.codes/tags/rails/", "content": "Here\u2019s the crux of the problem though:", "images": []},
{"title": "missing", "links": "https://solnic.codes/tags/community/", "content": "an API which is implemented as part of a Ruby dialect looks \u201cnicer\u201d, more concise and natural", "images": []},
{"title": "missing", "links": "https://twitter.com/intent/tweet/?text=Rails%20is%20not%20written%20in%20Ruby&url=https%3a%2f%2fsolnic.codes%2f2022%2f02%2f02%2frails-is-not-written-in-ruby%2f&hashtags=ruby%2crails%2ccommunity", "content": "Why? Because it ", "images": []},
{"title": "missing", "links": "https://www.linkedin.com/shareArticle?mini=true&url=https%3a%2f%2fsolnic.codes%2f2022%2f02%2f02%2frails-is-not-written-in-ruby%2f&title=Rails%20is%20not%20written%20in%20Ruby&summary=Rails%20is%20not%20written%20in%20Ruby&source=https%3a%2f%2fsolnic.codes%2f2022%2f02%2f02%2frails-is-not-written-in-ruby%2f", "content": "! This is why things like ", "images": []},
{"title": "missing", "links": "https://reddit.com/submit?url=https%3a%2f%2fsolnic.codes%2f2022%2f02%2f02%2frails-is-not-written-in-ruby%2f&title=Rails%20is%20not%20written%20in%20Ruby", "content": " looks so \u201cnatural\u201d. Except that it\u2019s not Ruby - it\u2019s ActiveSupport.", "images": []},
{"title": "missing", "links": "https://facebook.com/sharer/sharer.php?u=https%3a%2f%2fsolnic.codes%2f2022%2f02%2f02%2frails-is-not-written-in-ruby%2f", "content": "When you think about it, you may realize that this is a huge advantage that Rails has over ", "images": []},
{"title": "missing", "links": "https://api.whatsapp.com/send?text=Rails%20is%20not%20written%20in%20Ruby%20-%20https%3a%2f%2fsolnic.codes%2f2022%2f02%2f02%2frails-is-not-written-in-ruby%2f", "content": " - it\u2019s got monopoly for monkey-patching.", "images": []},
{"title": "missing", "links": "https://telegram.me/share/url?text=Rails%20is%20not%20written%20in%20Ruby&url=https%3a%2f%2fsolnic.codes%2f2022%2f02%2f02%2frails-is-not-written-in-ruby%2f", "content": "For people like me, who are working on Ruby libraries, experiencing constant pushbacks and negative feedback every time you try to show how to approach certain problems is just daunting. It happens quite often that you show something now and all you hear is \u201cthat\u2019s too complicated\u201d. The reason why something seems to be \u201cmore complicated\u201d is that ", "images": []},
{"title": "missing", "links": "https://disqus.com/?ref_noscript", "content": ", with objects, and encapsulation of behavior&mldr;rather than chucking in whatever you want in any class that you happen to find useful.", "images": []},
{"title": "missing", "links": "https://disqus.com", "content": "! it was brought to my attention that this paragraph makes it seem like I\u2019m frustrated and creates an impression that the article is toxic as I\u2019m making Rails look bad - to clarify: I\u2019m not frustrated, far from it, sometimes I feel tired and lose motivation, but it\u2019s just \u201ca bad day\u201d. My intention with this paragraph was to express ", "images": []},
{"title": "missing", "links": "https://solnic.codes", "content": ", which is based on my past experience. My intention with the entire article was to ", "images": []},
{"title": "missing", "links": "https://gohugo.io/", "content": " what ActiveSupport actually is so that you can have some perspective, which I believe many people don\u2019t have. This is why discussing Ruby code is sometimes challenging, due to the lack of this perspective.", "images": []},
{"title": "missing", "links": "https://git.io/hugopapermod", "content": "If you consider the entire Ruby ecosystem, this is a real problem. First of all, you compete using plain Ruby with the ActiveSupport dialect - in most cases you\u2019ve lost before you even started coding, because most Ruby developers won\u2019t like whatever you\u2019re going to build. People have certain expectations from Ruby libraries and they are ", "images": []},
{"title": "missing", "links": "#top", "content": ".", "images": []},
{"title": "missing", "links": "missing", "content": "Another rather negative implication is that Rails, through ActiveSupport, has created a massive confusion about what is Ruby vs what is Ruby with ActiveSupport. This has never been a good thing. Trust me, there are people in other programming communities who dislike Ruby when in reality, they actually dislike Rails! People confuse the two all the time.", "images": []},
{"title": "missing", "links": "missing", "content": "Yes, and? This is not an argument that can justify monkey-patching. If you want to experiment with new methods, do it in isolation, in your own codebase. If you feel good about what you came up with - report an issue in the Ruby tracker suggesting a new method addition.", "images": []},
{"title": "missing", "links": "missing", "content": "This also goes back to what I previously mentioned: monopoly for monkey-patching. It\u2019s not OK that there\u2019s this one library with special treatment that can monkey-patch pretty much whatever and then some of its patches can end up in the language itself.", "images": []},
{"title": "missing", "links": "missing", "content": "I often mention that monkey-patching isn\u2019t even a sound technical solution, simply because you can\u2019t compose monkey-patches, there\u2019s lack of encapsulation and proper boundaries and, to make things worse, it can easily lead to naming conflicts. Let\u2019s break this down:", "images": []},
{"title": "missing", "links": "missing", "content": "Composability is a very powerful technique. In Ruby, it can be easily achieved by simply using objects. In functional language, you can simply compose functions. What does it mean to compose functionality? It just means that you take functionality X, and functionality Y, and you turn it into functionality Z which combines the two in such a way, that X and Y are hidden (which is called encapsulation, but I\u2019ll get to this part later).", "images": []},
{"title": "missing", "links": "missing", "content": "Here\u2019s why this doesn\u2019t work so well in case of ActiveSupport (and monkey-patching in general). Let\u2019s say you have a number and you want to format it, ActiveSupport provides a ", "images": []},
{"title": "missing", "links": "missing", "content": " method implemented as a Numeric core extension:", "images": []},
{"title": "missing", "links": "missing", "content": "Cool, right? So natural, look at this beautiful piece of ", "images": []},
{"title": "missing", "links": "missing", "content": " ActiveSupport dialect.", "images": []},
{"title": "missing", "links": "missing", "content": "Now, imagine that you need to preprocess the number somehow, maybe you need to trim it and remove some junk. What do you do?", "images": []},
{"title": "missing", "links": "missing", "content": "OK, you\u2019re still covered by Ruby and ActiveSupport, let\u2019s say you can live with this for some time but then you realize you need to validate the string (as you should) before doing anything with it. What do you do? This?:", "images": []},
{"title": "missing", "links": "missing", "content": "If you\u2019re shaking your head that it would be a bad idea then of course you\u2019re right, but guess what - ", "images": []},
{"title": "missing", "links": "missing", "content": "! In fact, I bet there are people who still do that! Overall, the consensus within the community ", "images": []},
{"title": "missing", "links": "missing", "content": " that it is indeed a bad idea and a massive code smell. Most experienced Ruby developers don\u2019t monkey-patch core classes anymore.", "images": []},
{"title": "missing", "links": "missing", "content": "Encapsulation is important because it allows you to achieve composability, pluggability, extensibility and in general makes your code much easier to work with. If boundaries are not clear, unrelated functionality gets mixed together either by an accident or simply by making bad design decisions (or not making any design decisions at all). Your code becomes less and less cohesive and as a result you will inevitably end up in misery.", "images": []},
{"title": "missing", "links": "missing", "content": "Numbers are primitive values, they shouldn\u2019t be coupled to details like phone formatting. Sure, it\u2019s convenient and looks cute but it comes with serious drawbacks. First of all ", "images": []},
{"title": "missing", "links": "missing", "content": ". There\u2019s a limit. Once you reach this limit, you will start implementing domain-specific functionality in a different way - this is where your code already starts losing cohesion and this is also how things become less composable. You\u2019re no longer chaining methods, you now have a separate abstraction to do more heavy work but it\u2019s not part of the Number API, because it would be too much.", "images": []},
{"title": "missing", "links": "missing", "content": "with monkey-patching approach you\u2019re making boundaries within your system less clear.", "images": []},
{"title": "missing", "links": "missing", "content": "This is a simple consequence of putting things in places where they don\u2019t belong. Monkey-patches like ", "images": []},
{"title": "missing", "links": "missing", "content": " are honestly just helpers, helpers attached to core classes. They are only needed in very specific places; however, they are provided globally due to the nature of monkey-patching! Every core object has these methods after all. This, in turn, makes it possible to reach out for them anywhere in your code base.", "images": []},
{"title": "missing", "links": "missing", "content": "! Please also see my comment ", "images": []},
{"title": "missing", "links": "missing", "content": "This is probably the most obvious drawback. If you throw encapsulation out of the window and assume that it\u2019s OK to monkey-patch, then it\u2019s easy to imagine a situation where two people come up with the same method name, implement them as a monkey-patch in the same class and now you have a problem.", "images": []},
{"title": "missing", "links": "missing", "content": "Let me remind you once again: we used to have plenty of gems shipping with monkey-patched core classes, it caused a lot of trouble, we\u2019ve stopped doing it because it was wrong. Simple.", "images": []},
{"title": "missing", "links": "missing", "content": "Ruby! For the love of Matz, the alternative is to just use Ruby. You can achieve ", "images": []},
{"title": "missing", "links": "missing", "content": " with this language without having to alter core classes. It\u2019s not just about core classes though. There are so many libraries out there that integrate with other libraries by&mldr;yes, by monkey-patching them. In a way, I see this as a result (a legacy?) of Rails and the mindset behind it. This is what we have learned to do, but we can do better.", "images": []},
{"title": "missing", "links": "missing", "content": "How can you achieve composability? You use object composition. It can be as simple as ", "images": []},
{"title": "missing", "links": "missing", "content": ". You don\u2019t want to write code like that? I know, me neither. That\u2019s why there are libraries with nice abstractions and DSLs. Go look around, they exist.", "images": []},
{"title": "missing", "links": "missing", "content": "Do take a look at RSpec\u2019s evolution. How it went from ", "images": []},
{"title": "missing", "links": "missing", "content": " to ", "images": []},
{"title": "missing", "links": "missing", "content": ". I don\u2019t think anybody misses the old syntax. I\u2019m sure there are more examples of such transitions, let me know if you remember them.", "images": []},
{"title": "missing", "links": "missing", "content": "If you think ActiveSupport\u2019s time helpers cannot be replaced, then take a look at ", "images": []},
{"title": "missing", "links": "missing", "content": " gem. There is a significant difference between composable time calculations vs a bunch of time helper methods attached to integers.", "images": []},
{"title": "missing", "links": "missing", "content": "I really wanted to provide some concrete examples but this would be too much. I\u2019m gonna publish this to get it out of my head but I\u2019m more than happy to keep discussing this subject, as you can see I\u2019m quite passionate about it \ud83d\ude09.", "images": []},
{"title": "missing", "links": "missing", "content": "For the time being, I would love if you checked out OSS libraries that me and many other people have been working on for years now. Things will be much simpler for me to just \u201cshow off\u201d once we\u2019re done with ", "images": []},
{"title": "missing", "links": "missing", "content": " final but for now, check out ", "images": []},
{"title": "missing", "links": "missing", "content": " - it\u2019s a great example how libraries can be implemented without monkey-patching, they are all composable and unobtrusive, so you can add them easily to an existing code base. You may also discover how well they play with other libraries!", "images": []},
{"title": "missing", "links": "missing", "content": "I\u2019m open to your feedback, questions and concerns (no pun intended!). I think I want to keep on working on this article, maybe turn it into a sticky page or something here. It\u2019s not the first time when I talk about this topic, and I actually really don\u2019t like to repeat myself, but I would like to have a single resource that I could simply point people to whenever I find myself complaining about ActiveSupport on Twitter again \ud83e\udd2d.", "images": []}
]