<p>I like this list.<br> I really respect in particular:...please be aware that I’m after the low-hanging fruit, that is, tools that can make an existing Unix / Linux command line environment a bit better with the least disruption.<br>In other words, I will not touch on how to have brand new, GPU-powered terminal emulators...The command line and the terminal are two very different things.<br> People need the command line a lot, but not so much the terminal.<br> It's nice to see someone who understands that, and puts the focus on what you are trying to get done logically rather than the limited VT100/Xterm-type interfaces to those tasks.Although this part:glances : a cross-platform, modern system monitoring tool that demonstrates the power of TUI.<br>See  for screenshots and its many features....<br> undersells the power of TUI.As a newbie still learning, and really not wanting to blow my time trying to figure out things thats not battle tested and perhaps lack behind in tutorials tips and tricks of the trade etc etc..Is it therefore reasonable to not worry too much about newer stuff like ugrep rg etc as opposed to the traditional grep find etc?  Or should I just target the newer stuff instead and not worry so much?Any insights & advise?Good question.From my own experience in the past learning Unix after graduating from DOS, Apple Integer BASIC, Pascal, Fortran, Forth and so on, the first principle of Unix that I really stuck with me is the "" philosophy of Unix, where "programs" refers to the Unix utilities.<br>It's an inherently beautiful concept that is remarkably effective till this day.This philosophy expects Unix "line commanders" (I just came up with that term...) to learn the shell "glue" (pipes, redirecting, etc) and scripting, to solve problems by "glueing" utilities together on the command line or in shell scripts.<br>This is best learned by examples and by solving small problems first.On the other hand, many such tasks and problems have been solved before, by known "glue" scripts or by new utilities and programs.<br>Especially more challenging tasks/problems may warrant a new program or extending a utility with the required extras.<br>These are debugged too, so you won't have to roll out your own solution and perhaps spent more time debugging your program or script than you ever wanted.The important point is that if you are a beginner then cover the basis first by learning how to use existing utilities and options.<br>When you ever have to work on a system that is not your own, you don't want to have to install a lot of utilities to get started, if you even have the permission to install, which you may not.But even if you use the "traditional" utilities all the time, you'll likely find yourself grabbing one of those newer "power tools" now and then.And let's not forget that TUIs are powerful.<br>So much better than scrolling pages of output.<br>So I go for that.<br>If the new utility has a TUI and has compatible command line options and features to the "traditional" utilities, then why not use it when you need to?For the running speed of utilities, I don't care much about speed, unless it really matters of course, which is not very frequent.<br>What really counts is the features that are harder or impossible to accomplish with existing utilities or via scripting your own.Maybe not the best answer, but hope this helps.MembersOnlineI like this list.<br> I really respect in particular:...please be aware that I’m after the low-hanging fruit, that is, tools that can make an existing Unix / Linux command line environment a bit better with the least disruption.<br>In other words, I will not touch on how to have brand new, GPU-powered terminal emulators...The command line and the terminal are two very different things.<br> People need the command line a lot, but not so much the terminal.<br> It's nice to see someone who understands that, and puts the focus on what you are trying to get done logically rather than the limited VT100/Xterm-type interfaces to those tasks.Although this part:glances : a cross-platform, modern system monitoring tool that demonstrates the power of TUI.<br>See  for screenshots and its many features....<br> undersells the power of TUI.As a newbie still learning, and really not wanting to blow my time trying to figure out things thats not battle tested and perhaps lack behind in tutorials tips and tricks of the trade etc etc..Is it therefore reasonable to not worry too much about newer stuff like ugrep rg etc as opposed to the traditional grep find etc?  Or should I just target the newer stuff instead and not worry so much?Any insights & advise?Good question.From my own experience in the past learning Unix after graduating from DOS, Apple Integer BASIC, Pascal, Fortran, Forth and so on, the first principle of Unix that I really stuck with me is the "" philosophy of Unix, where "programs" refers to the Unix utilities.<br>It's an inherently beautiful concept that is remarkably effective till this day.This philosophy expects Unix "line commanders" (I just came up with that term...) to learn the shell "glue" (pipes, redirecting, etc) and scripting, to solve problems by "glueing" utilities together on the command line or in shell scripts.<br>This is best learned by examples and by solving small problems first.On the other hand, many such tasks and problems have been solved before, by known "glue" scripts or by new utilities and programs.<br>Especially more challenging tasks/problems may warrant a new program or extending a utility with the required extras.<br>These are debugged too, so you won't have to roll out your own solution and perhaps spent more time debugging your program or script than you ever wanted.The important point is that if you are a beginner then cover the basis first by learning how to use existing utilities and options.<br>When you ever have to work on a system that is not your own, you don't want to have to install a lot of utilities to get started, if you even have the permission to install, which you may not.But even if you use the "traditional" utilities all the time, you'll likely find yourself grabbing one of those newer "power tools" now and then.And let's not forget that TUIs are powerful.<br>So much better than scrolling pages of output.<br>So I go for that.<br>If the new utility has a TUI and has compatible command line options and features to the "traditional" utilities, then why not use it when you need to?For the running speed of utilities, I don't care much about speed, unless it really matters of course, which is not very frequent.<br>What really counts is the features that are harder or impossible to accomplish with existing utilities or via scripting your own.Maybe not the best answer, but hope this helps.MembersOnlineI like this list.<br> I really respect in particular:...please be aware that I’m after the low-hanging fruit, that is, tools that can make an existing Unix / Linux command line environment a bit better with the least disruption.<br>In other words, I will not touch on how to have brand new, GPU-powered terminal emulators...The command line and the terminal are two very different things.<br> People need the command line a lot, but not so much the terminal.<br> It's nice to see someone who understands that, and puts the focus on what you are trying to get done logically rather than the limited VT100/Xterm-type interfaces to those tasks.Although this part:glances : a cross-platform, modern system monitoring tool that demonstrates the power of TUI.<br>See  for screenshots and its many features....<br> undersells the power of TUI.As a newbie still learning, and really not wanting to blow my time trying to figure out things thats not battle tested and perhaps lack behind in tutorials tips and tricks of the trade etc etc..Is it therefore reasonable to not worry too much about newer stuff like ugrep rg etc as opposed to the traditional grep find etc?  Or should I just target the newer stuff instead and not worry so much?Any insights & advise?Good question.From my own experience in the past learning Unix after graduating from DOS, Apple Integer BASIC, Pascal, Fortran, Forth and so on, the first principle of Unix that I really stuck with me is the "" philosophy of Unix, where "programs" refers to the Unix utilities.<br>It's an inherently beautiful concept that is remarkably effective till this day.This philosophy expects Unix "line commanders" (I just came up with that term...) to learn the shell "glue" (pipes, redirecting, etc) and scripting, to solve problems by "glueing" utilities together on the command line or in shell scripts.<br>This is best learned by examples and by solving small problems first.On the other hand, many such tasks and problems have been solved before, by known "glue" scripts or by new utilities and programs.<br>Especially more challenging tasks/problems may warrant a new program or extending a utility with the required extras.<br>These are debugged too, so you won't have to roll out your own solution and perhaps spent more time debugging your program or script than you ever wanted.The important point is that if you are a beginner then cover the basis first by learning how to use existing utilities and options.<br>When you ever have to work on a system that is not your own, you don't want to have to install a lot of utilities to get started, if you even have the permission to install, which you may not.But even if you use the "traditional" utilities all the time, you'll likely find yourself grabbing one of those newer "power tools" now and then.And let's not forget that TUIs are powerful.<br>So much better than scrolling pages of output.<br>So I go for that.<br>If the new utility has a TUI and has compatible command line options and features to the "traditional" utilities, then why not use it when you need to?For the running speed of utilities, I don't care much about speed, unless it really matters of course, which is not very frequent.<br>What really counts is the features that are harder or impossible to accomplish with existing utilities or via scripting your own.Maybe not the best answer, but hope this helps.MembersOnline</p>
