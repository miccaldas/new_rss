<p>If there is any feature that “universally” describes the usage of computers, it is the copy/paste pattern.<br>We are used to it, practically all the common graphical user interfaces have support for it, and it magically works.We copy some information from one application and paste into another, and another…How does these applications have access to this information? The clipboard must be something that is shared across all of them, right? Right.<br>While very useful, this raises a lot of security questions.<br>As far as I can tell, all apps could be grabbing what is available on the clipboard.<br>It isn’t uncommon for people to copy sensitive information from one app to another and even if the information is not sensitive, the user generally has a clear target app for the information (the others don’t have anything to do with it).<br>These questions started bugging me a long time ago, and the sentiment even got worse when Apple released an iOS feature that notifies users when an app reads the contents of the clipboard.<br>That was brilliant, why didn’t anyone thought of that before?The result? Tons of apps caught snooping into the clipboard contents without the user asking for it.<br>The following articles can give you a glimpse of what followed:That’s not good, and saying you won’t do it again is not enough.<br>On iOS, apps were caught and users notified, but what about Android? What about other desktop operating systems?Accessing the clipboard to check what’s there, then steal passwords, or replace cryptocurrency addresses or just to get a glimpse of what the user is doing .A couple of weeks ago, I started to look at how this works (on Linux, which is what I’m currently using).<br>What I found is that most libraries just provide a simple interface to put things on the clipboard and to get the current clipboard content.<br>Nothing else.<br>After further digging, I finally found some useful and interesting articles on how this feature works on X11 (under the hood of those high level APIs).<br>For example:Then, with this bit of knowledge about how the clipboard works in X11, I decided to do a quick experiment in order to check if I can recreate the clipboard access notifications seen in iOS.<br>During the small periods I had available in the last few weekends, I tried to build a quick proof of concept, nothing fancy, just a few pieces of code from existing examples stitched together.<br>Here’s the current result:It seems possible to detect all attempts of accessing the clipboard, but after struggling a bit, it seems that due to the nature of X11 it is not possible to know which running process owns the window that is accessing the clipboard.<br>A shame.The information that X11 has about the requesting client must be provided by the client itself, which makes it very hard to know for sure which process it is (most of the time it is not provided at all).Nevertheless, I think this could still be a very useful capability for existing clipboard managers (such as Klipper), given the core of this app works just like one.Even without knowing the process trying to access the clipboard contents, I can see a few useful features that are possible to implement, such as:Anyhow, you can check the proof of concept  and give it a try (improvements are welcome).<br>Let me know what you think and what I’ve missed.Software developer and owner of this blog.<br>More in the "about" page.This behaviour has bothered me for quite a while and I am now in the habit of clearing the clipboard immediately after using it.<br>The only solution I can think of a is a clipboard timer: After a set time the clipboard automatically clears itself.<br>As this doesn’t exist I can only assume there is a technical reason why it doesn’t.At least one password manager (LastPass, maybe?) does this.<br>It can be configured to clear your clipboard after pasting the password you had it copy to it.KeePassXC does it and is open source if you want to see how!      

This work by  is licensed under a .©
2022 


If there is any feature that “universally” describes the usage of computers, it is the copy/paste pattern.<br>We are used to it, practically all the common graphical user interfaces have support for it, and it magically works.We copy some information from one application and paste into another, and another…How does these applications have access to this information? The clipboard must be something that is shared across all of them, right? Right.<br>While very useful, this raises a lot of security questions.<br>As far as I can tell, all apps could be grabbing what is available on the clipboard.<br>It isn’t uncommon for people to copy sensitive information from one app to another and even if the information is not sensitive, the user generally has a clear target app for the information (the others don’t have anything to do with it).<br>These questions started bugging me a long time ago, and the sentiment even got worse when Apple released an iOS feature that notifies users when an app reads the contents of the clipboard.<br>That was brilliant, why didn’t anyone thought of that before?The result? Tons of apps caught snooping into the clipboard contents without the user asking for it.<br>The following articles can give you a glimpse of what followed:That’s not good, and saying you won’t do it again is not enough.<br>On iOS, apps were caught and users notified, but what about Android? What about other desktop operating systems?Accessing the clipboard to check what’s there, then steal passwords, or replace cryptocurrency addresses or just to get a glimpse of what the user is doing .A couple of weeks ago, I started to look at how this works (on Linux, which is what I’m currently using).<br>What I found is that most libraries just provide a simple interface to put things on the clipboard and to get the current clipboard content.<br>Nothing else.<br>After further digging, I finally found some useful and interesting articles on how this feature works on X11 (under the hood of those high level APIs).<br>For example:Then, with this bit of knowledge about how the clipboard works in X11, I decided to do a quick experiment in order to check if I can recreate the clipboard access notifications seen in iOS.<br>During the small periods I had available in the last few weekends, I tried to build a quick proof of concept, nothing fancy, just a few pieces of code from existing examples stitched together.<br>Here’s the current result:It seems possible to detect all attempts of accessing the clipboard, but after struggling a bit, it seems that due to the nature of X11 it is not possible to know which running process owns the window that is accessing the clipboard.<br>A shame.The information that X11 has about the requesting client must be provided by the client itself, which makes it very hard to know for sure which process it is (most of the time it is not provided at all).Nevertheless, I think this could still be a very useful capability for existing clipboard managers (such as Klipper), given the core of this app works just like one.Even without knowing the process trying to access the clipboard contents, I can see a few useful features that are possible to implement, such as:Anyhow, you can check the proof of concept  and give it a try (improvements are welcome).<br>Let me know what you think and what I’ve missed.Software developer and owner of this blog.<br>More in the "about" page.This behaviour has bothered me for quite a while and I am now in the habit of clearing the clipboard immediately after using it.<br>The only solution I can think of a is a clipboard timer: After a set time the clipboard automatically clears itself.<br>As this doesn’t exist I can only assume there is a technical reason why it doesn’t.At least one password manager (LastPass, maybe?) does this.<br>It can be configured to clear your clipboard after pasting the password you had it copy to it.KeePassXC does it and is open source if you want to see how!      

This work by  is licensed under a .©
2022 


If there is any feature that “universally” describes the usage of computers, it is the copy/paste pattern.<br>We are used to it, practically all the common graphical user interfaces have support for it, and it magically works.We copy some information from one application and paste into another, and another…How does these applications have access to this information? The clipboard must be something that is shared across all of them, right? Right.<br>While very useful, this raises a lot of security questions.<br>As far as I can tell, all apps could be grabbing what is available on the clipboard.<br>It isn’t uncommon for people to copy sensitive information from one app to another and even if the information is not sensitive, the user generally has a clear target app for the information (the others don’t have anything to do with it).<br>These questions started bugging me a long time ago, and the sentiment even got worse when Apple released an iOS feature that notifies users when an app reads the contents of the clipboard.<br>That was brilliant, why didn’t anyone thought of that before?The result? Tons of apps caught snooping into the clipboard contents without the user asking for it.<br>The following articles can give you a glimpse of what followed:That’s not good, and saying you won’t do it again is not enough.<br>On iOS, apps were caught and users notified, but what about Android? What about other desktop operating systems?Accessing the clipboard to check what’s there, then steal passwords, or replace cryptocurrency addresses or just to get a glimpse of what the user is doing .A couple of weeks ago, I started to look at how this works (on Linux, which is what I’m currently using).<br>What I found is that most libraries just provide a simple interface to put things on the clipboard and to get the current clipboard content.<br>Nothing else.<br>After further digging, I finally found some useful and interesting articles on how this feature works on X11 (under the hood of those high level APIs).<br>For example:Then, with this bit of knowledge about how the clipboard works in X11, I decided to do a quick experiment in order to check if I can recreate the clipboard access notifications seen in iOS.<br>During the small periods I had available in the last few weekends, I tried to build a quick proof of concept, nothing fancy, just a few pieces of code from existing examples stitched together.<br>Here’s the current result:It seems possible to detect all attempts of accessing the clipboard, but after struggling a bit, it seems that due to the nature of X11 it is not possible to know which running process owns the window that is accessing the clipboard.<br>A shame.The information that X11 has about the requesting client must be provided by the client itself, which makes it very hard to know for sure which process it is (most of the time it is not provided at all).Nevertheless, I think this could still be a very useful capability for existing clipboard managers (such as Klipper), given the core of this app works just like one.Even without knowing the process trying to access the clipboard contents, I can see a few useful features that are possible to implement, such as:Anyhow, you can check the proof of concept  and give it a try (improvements are welcome).<br>Let me know what you think and what I’ve missed.Software developer and owner of this blog.<br>More in the "about" page.This behaviour has bothered me for quite a while and I am now in the habit of clearing the clipboard immediately after using it.<br>The only solution I can think of a is a clipboard timer: After a set time the clipboard automatically clears itself.<br>As this doesn’t exist I can only assume there is a technical reason why it doesn’t.At least one password manager (LastPass, maybe?) does this.<br>It can be configured to clear your clipboard after pasting the password you had it copy to it.KeePassXC does it and is open source if you want to see how!      

This work by  is licensed under a .©
2022 


If there is any feature that “universally” describes the usage of computers, it is the copy/paste pattern.<br>We are used to it, practically all the common graphical user interfaces have support for it, and it magically works.We copy some information from one application and paste into another, and another…How does these applications have access to this information? The clipboard must be something that is shared across all of them, right? Right.<br>While very useful, this raises a lot of security questions.<br>As far as I can tell, all apps could be grabbing what is available on the clipboard.<br>It isn’t uncommon for people to copy sensitive information from one app to another and even if the information is not sensitive, the user generally has a clear target app for the information (the others don’t have anything to do with it).<br>These questions started bugging me a long time ago, and the sentiment even got worse when Apple released an iOS feature that notifies users when an app reads the contents of the clipboard.<br>That was brilliant, why didn’t anyone thought of that before?The result? Tons of apps caught snooping into the clipboard contents without the user asking for it.<br>The following articles can give you a glimpse of what followed:That’s not good, and saying you won’t do it again is not enough.<br>On iOS, apps were caught and users notified, but what about Android? What about other desktop operating systems?Accessing the clipboard to check what’s there, then steal passwords, or replace cryptocurrency addresses or just to get a glimpse of what the user is doing .A couple of weeks ago, I started to look at how this works (on Linux, which is what I’m currently using).<br>What I found is that most libraries just provide a simple interface to put things on the clipboard and to get the current clipboard content.<br>Nothing else.<br>After further digging, I finally found some useful and interesting articles on how this feature works on X11 (under the hood of those high level APIs).<br>For example:Then, with this bit of knowledge about how the clipboard works in X11, I decided to do a quick experiment in order to check if I can recreate the clipboard access notifications seen in iOS.<br>During the small periods I had available in the last few weekends, I tried to build a quick proof of concept, nothing fancy, just a few pieces of code from existing examples stitched together.<br>Here’s the current result:It seems possible to detect all attempts of accessing the clipboard, but after struggling a bit, it seems that due to the nature of X11 it is not possible to know which running process owns the window that is accessing the clipboard.<br>A shame.The information that X11 has about the requesting client must be provided by the client itself, which makes it very hard to know for sure which process it is (most of the time it is not provided at all).Nevertheless, I think this could still be a very useful capability for existing clipboard managers (such as Klipper), given the core of this app works just like one.Even without knowing the process trying to access the clipboard contents, I can see a few useful features that are possible to implement, such as:Anyhow, you can check the proof of concept  and give it a try (improvements are welcome).<br>Let me know what you think and what I’ve missed.Software developer and owner of this blog.<br>More in the "about" page.This behaviour has bothered me for quite a while and I am now in the habit of clearing the clipboard immediately after using it.<br>The only solution I can think of a is a clipboard timer: After a set time the clipboard automatically clears itself.<br>As this doesn’t exist I can only assume there is a technical reason why it doesn’t.At least one password manager (LastPass, maybe?) does this.<br>It can be configured to clear your clipboard after pasting the password you had it copy to it.KeePassXC does it and is open source if you want to see how!      

This work by  is licensed under a .©
2022 


</p>
