[
{"title": "\n            ", "links": "https://hacks.mozilla.org", "content": "On January 13th 2022, Firefox became unusable for close to two hours for users worldwide. This incident interrupted many people\u2019s workflow. This post highlights the complex series of events and circumstances that, together, triggered a bug deep in the networking code of Firefox.", "images": []},
{"title": "\n          ", "links": "http://www.youtube.com/user/mozhacks", "content": "Firefox has a number of servers and related infrastructure that handle several internal services. These include updates, telemetry, certificate management, crash reporting and other similar functionality. This infrastructure is hosted by different cloud service providers that use load balancers to distribute the load evenly across servers. For those services hosted on Google Cloud Platform (GCP) these load balancers have settings related to the HTTP protocol they should advertise and one of these settings is HTTP/3 support with three states: \u201cEnabled\u201d, \u201cDisabled\u201d or \u201cAutomatic (default)\u201d. Our load balancers were set to the \u201cAutomatic (default)\u201d setting and on January 13, 2022 at 07:28 UTC, GCP deployed an unannounced change to make HTTP/3 the default. As Firefox uses HTTP/3 when supported, from that point forward, some connections that Firefox makes to the services infrastructure would use HTTP/3 instead of the previously used HTTP/2 protocol.", "images": []},
{"title": "Retrospective and Technical Details on the recent Firefox Outage", "links": "https://twitter.com/mozhacks", "content": "Shortly after, we noticed a spike in crashes being reported through our crash reporter and also received several reports from inside and outside of Mozilla describing a hang of the browser.", "images": []},
{"title": "missing", "links": "https://hacks.mozilla.org/feed/", "content": "As part of the incident response process, we quickly discovered that the client was hanging inside a network request to one of the Firefox internal services. However, at this point we neither had an explanation for why this would trigger just now, nor what the scope of the problem was. We continued to look for the \u201ctrigger\u201d \u2014 some change that must have occurred to start the problem. We found that we had not shipped updates or configuration changes that could have caused this problem. At the same time, we were keeping in mind that HTTP/3 had been enabled since Firefox 88 and was actively used by some popular websites.", "images": []},
{"title": "missing", "links": "https://www.mozilla.org/firefox/download/thanks/?utm_source=hacks.mozilla.org&utm_medium=referral&utm_campaign=header-download-button&utm_content=header-download-button", "content": "Although we couldn\u2019t see it, we suspected that there had been some kind of \u201cinvisible\u201d change rolled out by one of our cloud providers that somehow modified load balancer behavior. On closer inspection, none of our settings were changed. We then discovered through logs that for some reason, the load balancers for our Telemetry service were serving HTTP/3 connections while they hadn\u2019t done that before. We disabled HTTP/3 explicitly on GCP at 09:12 UTC. This unblocked our users, but we were not yet certain about the root cause and without knowing that, it was impossible for us to tell if this would affect additional HTTP/3 connections.", "images": []},
{"title": "missing", "links": "https://hacks.mozilla.org/author/chollermozilla-com/", "content": "It quickly became clear to us that there must be some combination of special circumstances for the hang to occur. We performed a number of tests with various tools and remote services and were not able to reproduce the problem, not even with a regular connection to the Telemetry staging server (a server only used for testing deployments, which we had left in its original configuration for testing purposes). With Firefox itself, however, we were able to reproduce the issue with the staging server.", "images": []},
{"title": "missing", "links": "https://hacks.mozilla.org/category/firefox/", "content": "After further debugging, we found the \u201cspecial ingredient\u201d required for this bug to happen. All HTTP/3 connections go through Necko, our networking stack. However, Rust components that need direct network access are not using Necko directly, but are calling into it through an intermediate library called ", "images": []},
{"title": "missing", "links": "#footnote1", "content": ".", "images": []},
{"title": "missing", "links": "https://github.com/mozilla/application-services/tree/main/components/viaduct", "content": "In order to understand why this mattered, we first need to understand some things about the internals of Necko, in particular about HTTP/3 upload requests. For such requests, the higher-level Necko APIs", "images": []},
{"title": "missing", "links": "#footnote2", "content": " check if the ", "images": []},
{"title": "missing", "links": "https://searchfox.org/mozilla-central/rev/435a77f1a1aaf1a78d30a2aaa81c6158a2f83dba/netwerk/protocol/http/Http3Stream.cpp#71,79-83", "content": " header is present and if it isn\u2019t, it will automatically be added. The lower-level HTTP/3 code later relies on this header to determine the request size. This works fine for web content and other requests in our code.", "images": []},
{"title": "missing", "links": "https://searchfox.org/mozilla-central/rev/435a77f1a1aaf1a78d30a2aaa81c6158a2f83dba/netwerk/protocol/http/Http3Stream.cpp#223,228,272-274", "content": "When requests pass through ", "images": []},
{"title": "missing", "links": "http://twitter.com/mozdeco", "content": " first, however, ", "images": []},
{"title": "missing", "links": "https://hacks.mozilla.org/author/chollermozilla-com/", "content": " will lower-case each header and pass it on to Necko. And here is the problem: the API checks in Necko are case-", "images": []},
{"title": "missing", "links": "https://www.mozilla.org/privacy/", "content": " while the lower-level HTTP/3 code is case-", "images": []},
{"title": "missing", "links": "https://hacks.mozilla.org/2022/02/retrospective-and-technical-details-on-the-recent-firefox-outage/#comment-27373", "content": ". So if any code was to add a ", "images": []},
{"title": "missing", "links": "#comment-27373", "content": " header and pass the request through ", "images": []},
{"title": "missing", "links": "https://hacks.mozilla.org/2022/02/retrospective-and-technical-details-on-the-recent-firefox-outage/#comment-27374", "content": ", it would pass the Necko API checks but the HTTP/3 code would not find the header.", "images": []},
{"title": "missing", "links": "#comment-27374", "content": "It just so happens that Telemetry is currently the only Rust-based component in Firefox Desktop that uses the network stack and adds a ", "images": []},
{"title": "missing", "links": "https://hacks.mozilla.org/2022/02/retrospective-and-technical-details-on-the-recent-firefox-outage/#comment-27375", "content": " header. This is why users who disabled Telemetry would see this problem resolved even though the problem is not related to Telemetry functionality itself and could have been triggered otherwise.", "images": []},
{"title": "missing", "links": "#comment-27375", "content": "With the load balancer change in place, and a special code path in a new Rust service now active, the necessary final ingredient to trigger the problem for users was deep in Necko HTTP/3 code.", "images": []},
{"title": "missing", "links": "/2022/02/retrospective-and-technical-details-on-the-recent-firefox-outage/#respond", "content": "When handling a request, the code ", "images": []},
{"title": "missing", "links": "https://creativecommons.org/licenses/by-sa/3.0/", "content": " and failed to find the header as it had been lower-cased by ", "images": []},
{"title": "missing", "links": "missing", "content": ". Without the header, the request was determined by the Necko code to be complete, leaving the real request body unsent. However, this code would only terminate when there was no additional content to send. This ", "images": []},
{"title": "missing", "links": "missing", "content": ". Because all network requests go through one ", "images": []},
{"title": "missing", "links": "missing", "content": ", this loop blocked any further network communication and made Firefox unresponsive, unable to load web content.", "images": []},
{"title": "missing", "links": "missing", "content": "As so often is the case, the issue was a lot more complex than it appeared at first glance and there were many contributing factors working together. Some of the key factors we have identified include:", "images": []},
{"title": "missing", "links": "missing", "content": "GCP\u2019s deployment of HTTP/3 as default was unannounced. We are actively working with them to improve the situation. We realize that an announcement (as is usually sent) might not have entirely mitigated the risk of an incident, but it would likely have triggered more controlled experiments (e.g. in a staging environment) and deployment.", "images": []},
{"title": "missing", "links": "missing", "content": "Our setting of \u201cAutomatic (default)\u201d on the load balancers instead of a more explicit choice allowed the deployment to take place automatically. We are reviewing all service configurations to avoid similar mistakes in the future.", "images": []},
{"title": "missing", "links": "missing", "content": "The particular combination of HTTP/3 and ", "images": []},
{"title": "missing", "links": "missing", "content": " on Firefox Desktop was not covered in our continuous integration system. While we cannot test every possible combination of configurations and components, the choice of HTTP version is a fairly major change that should have been tested, as well as the use of an additional networking layer like ", "images": []},
{"title": "missing", "links": "missing", "content": ". Current HTTP/3 tests cover the low-level protocol behavior and the Necko layer as it is used by web content. We should run more system tests with different HTTP versions and doing so could have revealed this problem.", "images": []},
{"title": "missing", "links": "missing", "content": "We are also investigating action points both to make the browser more resilient towards such problems and to make incident response even faster. Learning as much as possible from this incident will help us improve the quality of our products. We\u2019re grateful to all the users who have sent crash reports, worked with us in Bugzilla or helped others to work around the problem.", "images": []},
{"title": "missing", "links": "missing", "content": "Christian is a Firefox Tech Lead and Senior Staff Security Engineer at Mozilla.", "images": []},
{"title": "missing", "links": "missing", "content": "Sign up for the Mozilla Developer Newsletter:", "images": []},
{"title": "missing", "links": "missing", "content": "If you haven\u2019t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\n  ", "images": []},
{"title": "missing", "links": "missing", "content": "Excellent explanation of the issue. Very interesting read.", "images": []},
{"title": "missing", "links": "missing", "content": " ", "images": []},
{"title": "missing", "links": "missing", "content": "Why isn\u2019t one of the lessons learned to treat headers in a case-insensitive way? That\u2019s how they are supposed to be treated according to every HTTP standard, after all, and it would have avoided the issue in this case.", "images": []},
{"title": "missing", "links": "missing", "content": " ", "images": []},
{"title": "missing", "links": "missing", "content": "Headers are already treated in this way and the one place where the check was case-sensitive was simply a bug that could only be triggered by internal code, so it went undetected.", "images": []},
{"title": "missing", "links": "missing", "content": " ", "images": []},
{"title": "missing", "links": "missing", "content": "\n          Except where otherwise noted, content on this site is licensed\n          under the\n          ", "images": []},
{"title": "missing", "links": "missing", "content": "\n          or any later version.\n        ", "images": []}
][
{"title": "\n            ", "links": "https://hacks.mozilla.org", "content": "On January 13th 2022, Firefox became unusable for close to two hours for users worldwide. This incident interrupted many people\u2019s workflow. This post highlights the complex series of events and circumstances that, together, triggered a bug deep in the networking code of Firefox.", "images": []},
{"title": "\n          ", "links": "http://www.youtube.com/user/mozhacks", "content": "Firefox has a number of servers and related infrastructure that handle several internal services. These include updates, telemetry, certificate management, crash reporting and other similar functionality. This infrastructure is hosted by different cloud service providers that use load balancers to distribute the load evenly across servers. For those services hosted on Google Cloud Platform (GCP) these load balancers have settings related to the HTTP protocol they should advertise and one of these settings is HTTP/3 support with three states: \u201cEnabled\u201d, \u201cDisabled\u201d or \u201cAutomatic (default)\u201d. Our load balancers were set to the \u201cAutomatic (default)\u201d setting and on January 13, 2022 at 07:28 UTC, GCP deployed an unannounced change to make HTTP/3 the default. As Firefox uses HTTP/3 when supported, from that point forward, some connections that Firefox makes to the services infrastructure would use HTTP/3 instead of the previously used HTTP/2 protocol.", "images": []},
{"title": "Retrospective and Technical Details on the recent Firefox Outage", "links": "https://twitter.com/mozhacks", "content": "\u00b9", "images": []},
{"title": "missing", "links": "https://hacks.mozilla.org/feed/", "content": "Shortly after, we noticed a spike in crashes being reported through our crash reporter and also received several reports from inside and outside of Mozilla describing a hang of the browser.", "images": []},
{"title": "missing", "links": "https://www.mozilla.org/firefox/download/thanks/?utm_source=hacks.mozilla.org&utm_medium=referral&utm_campaign=header-download-button&utm_content=header-download-button", "content": "Backlog of pending crash reports building up and reaching close to 300K unprocessed reports.", "images": []},
{"title": "missing", "links": "https://hacks.mozilla.org/author/chollermozilla-com/", "content": "As part of the incident response process, we quickly discovered that the client was hanging inside a network request to one of the Firefox internal services. However, at this point we neither had an explanation for why this would trigger just now, nor what the scope of the problem was. We continued to look for the \u201ctrigger\u201d \u2014 some change that must have occurred to start the problem. We found that we had not shipped updates or configuration changes that could have caused this problem. At the same time, we were keeping in mind that HTTP/3 had been enabled since Firefox 88 and was actively used by some popular websites.", "images": []},
{"title": "missing", "links": "https://hacks.mozilla.org/category/featured/", "content": "Although we couldn\u2019t see it, we suspected that there had been some kind of \u201cinvisible\u201d change rolled out by one of our cloud providers that somehow modified load balancer behavior. On closer inspection, none of our settings were changed. We then discovered through logs that for some reason, the load balancers for our Telemetry service were serving HTTP/3 connections while they hadn\u2019t done that before. We disabled HTTP/3 explicitly on GCP at 09:12 UTC. This unblocked our users, but we were not yet certain about the root cause and without knowing that, it was impossible for us to tell if this would affect additional HTTP/3 connections.", "images": []},
{"title": "missing", "links": "https://hacks.mozilla.org/category/firefox/", "content": "It quickly became clear to us that there must be some combination of special circumstances for the hang to occur. We performed a number of tests with various tools and remote services and were not able to reproduce the problem, not even with a regular connection to the Telemetry staging server (a server only used for testing deployments, which we had left in its original configuration for testing purposes). With Firefox itself, however, we were able to reproduce the issue with the staging server.", "images": []},
{"title": "missing", "links": "https://hacks.mozilla.org/category/firefox-os/", "content": "After further debugging, we found the \u201cspecial ingredient\u201d required for this bug to happen. All HTTP/3 connections go through Necko, our networking stack. However, Rust components that need direct network access are not using Necko directly, but are calling into it through an intermediate library called ", "images": []},
{"title": "missing", "links": "https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2022/01/crashes-foxstuck2.png", "content": ".", "images": []},
{"title": "missing", "links": "#footnote1", "content": "In order to understand why this mattered, we first need to understand some things about the internals of Necko, in particular about HTTP/3 upload requests. For such requests, the higher-level Necko APIs", "images": []},
{"title": "missing", "links": "https://github.com/mozilla/application-services/tree/main/components/viaduct", "content": "\u00b2 check if the ", "images": []},
{"title": "missing", "links": "https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2022/01/foxstuck-diagram4.png", "content": " header is present and if it isn\u2019t, it will automatically be added. The lower-level HTTP/3 code later relies on this header to determine the request size. This works fine for web content and other requests in our code.", "images": []},
{"title": "missing", "links": "#footnote2", "content": "When requests pass through ", "images": []},
{"title": "missing", "links": "https://searchfox.org/mozilla-central/rev/435a77f1a1aaf1a78d30a2aaa81c6158a2f83dba/netwerk/protocol/http/Http3Stream.cpp#71,79-83", "content": " first, however, ", "images": []},
{"title": "missing", "links": "https://searchfox.org/mozilla-central/rev/435a77f1a1aaf1a78d30a2aaa81c6158a2f83dba/netwerk/protocol/http/Http3Stream.cpp#223,228,272-274", "content": " will lower-case each header and pass it on to Necko. And here is the problem: the API checks in Necko are case-", "images": []},
{"title": "missing", "links": "http://twitter.com/mozdeco", "content": " while the lower-level HTTP/3 code is case-", "images": []},
{"title": "missing", "links": "https://hacks.mozilla.org/author/chollermozilla-com/", "content": ". So if any code was to add a ", "images": []},
{"title": "missing", "links": "https://www.mozilla.org/privacy/", "content": " header and pass the request through ", "images": []},
{"title": "missing", "links": "https://hacks.mozilla.org/2022/02/retrospective-and-technical-details-on-the-recent-firefox-outage/#comment-27373", "content": ", it would pass the Necko API checks but the HTTP/3 code would not find the header.", "images": []},
{"title": "missing", "links": "#comment-27373", "content": "It just so happens that Telemetry is currently the only Rust-based component in Firefox Desktop that uses the network stack and adds a ", "images": []},
{"title": "missing", "links": "https://hacks.mozilla.org/2022/02/retrospective-and-technical-details-on-the-recent-firefox-outage/#comment-27374", "content": " header. This is why users who disabled Telemetry would see this problem resolved even though the problem is not related to Telemetry functionality itself and could have been triggered otherwise.", "images": []},
{"title": "missing", "links": "#comment-27374", "content": "A specific code path was required to trigger the problem in the HTTP/3 protocol implementation.", "images": []},
{"title": "missing", "links": "https://hacks.mozilla.org/2022/02/retrospective-and-technical-details-on-the-recent-firefox-outage/#comment-27375", "content": "With the load balancer change in place, and a special code path in a new Rust service now active, the necessary final ingredient to trigger the problem for users was deep in Necko HTTP/3 code.", "images": []},
{"title": "missing", "links": "#comment-27375", "content": "When handling a request, the code ", "images": []},
{"title": "missing", "links": "/2022/02/retrospective-and-technical-details-on-the-recent-firefox-outage/#respond", "content": " and failed to find the header as it had been lower-cased by ", "images": []},
{"title": "missing", "links": "https://creativecommons.org/licenses/by-sa/3.0/", "content": ". Without the header, the request was determined by the Necko code to be complete, leaving the real request body unsent. However, this code would only terminate when there was no additional content to send. This ", "images": []},
{"title": "missing", "links": "missing", "content": ". Because all network requests go through one ", "images": []},
{"title": "missing", "links": "missing", "content": ", this loop blocked any further network communication and made Firefox unresponsive, unable to load web content.", "images": []},
{"title": "missing", "links": "missing", "content": "As so often is the case, the issue was a lot more complex than it appeared at first glance and there were many contributing factors working together. Some of the key factors we have identified include:", "images": []},
{"title": "missing", "links": "missing", "content": "GCP\u2019s deployment of HTTP/3 as default was unannounced. We are actively working with them to improve the situation. We realize that an announcement (as is usually sent) might not have entirely mitigated the risk of an incident, but it would likely have triggered more controlled experiments (e.g. in a staging environment) and deployment.", "images": []},
{"title": "missing", "links": "missing", "content": "Our setting of \u201cAutomatic (default)\u201d on the load balancers instead of a more explicit choice allowed the deployment to take place automatically. We are reviewing all service configurations to avoid similar mistakes in the future.", "images": []},
{"title": "missing", "links": "missing", "content": "The particular combination of HTTP/3 and ", "images": []},
{"title": "missing", "links": "missing", "content": " on Firefox Desktop was not covered in our continuous integration system. While we cannot test every possible combination of configurations and components, the choice of HTTP version is a fairly major change that should have been tested, as well as the use of an additional networking layer like ", "images": []},
{"title": "missing", "links": "missing", "content": ". Current HTTP/3 tests cover the low-level protocol behavior and the Necko layer as it is used by web content. We should run more system tests with different HTTP versions and doing so could have revealed this problem.", "images": []},
{"title": "missing", "links": "missing", "content": "We are also investigating action points both to make the browser more resilient towards such problems and to make incident response even faster. Learning as much as possible from this incident will help us improve the quality of our products. We\u2019re grateful to all the users who have sent crash reports, worked with us in Bugzilla or helped others to work around the problem.", "images": []},
{"title": "missing", "links": "missing", "content": "Christian is a Firefox Tech Lead and Senior Staff Security Engineer at Mozilla.", "images": []},
{"title": "missing", "links": "missing", "content": "Sign up for the Mozilla Developer Newsletter:", "images": []},
{"title": "missing", "links": "missing", "content": "If you haven\u2019t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\n  ", "images": []},
{"title": "missing", "links": "missing", "content": "Excellent explanation of the issue. Very interesting read.", "images": []},
{"title": "missing", "links": "missing", "content": " ", "images": []},
{"title": "missing", "links": "missing", "content": "Why isn\u2019t one of the lessons learned to treat headers in a case-insensitive way? That\u2019s how they are supposed to be treated according to every HTTP standard, after all, and it would have avoided the issue in this case.", "images": []},
{"title": "missing", "links": "missing", "content": " ", "images": []},
{"title": "missing", "links": "missing", "content": "Headers are already treated in this way and the one place where the check was case-sensitive was simply a bug that could only be triggered by internal code, so it went undetected.", "images": []},
{"title": "missing", "links": "missing", "content": " ", "images": []},
{"title": "missing", "links": "missing", "content": "\n          Except where otherwise noted, content on this site is licensed\n          under the\n          ", "images": []},
{"title": "missing", "links": "missing", "content": "\n          or any later version.\n        ", "images": []}
]