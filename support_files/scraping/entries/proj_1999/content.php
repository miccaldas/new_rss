<p>Recently released in Pop!_OS is .<br>It is a system service which automatically tunes the CFS scheduler for low latency scheduling while on AC; provides configurable automatic process priority assignments; and when used with the , foreground process management is activated to assign higher priority to the focused window and its sub-processes, while assigning lower priority to background processes.Through internal testing, this noticeably improves desktop responsiveness for low end hardware like the Raspberry Pi, as well as the smoothness and framerates of games and VR overall.<br>We had the smoothest VR gaming experience with this.The service watches upower (via ) for battery status events.<br>When plugged into AC, it'll tweak the CFS scheduler's parameters to enable low latency scheduling to match the settings in the Zen kernel.<br>When disconnected from AC, it reverts to the mainline kernel defaults to save battery.<br>This affects how often the CPU scheduler switches between threads, with low latency scheduling switching more often.It also does a periodic scan of processes in  and applies priorities based on assignments given by RON configuration files in  and .<br>There are some recommended defaults being distributed with it to use as an example.<br>Each periodic scan is performed once per minute, and takes a couple milliseconds to complete.<br>Common compiler processes are on the low priority list.Foreground process management is activated when pop-shell starts sending foreground process IDs to the service.<br>Only the window manager has knowledge of what process has the active focus, so pop-shell provides that information.<br>The service scans  to get the PPID (parent PID) of each process, records all processes which have the focused window as their ancestor, and then applies a higher priority to the foreground process and its descendants, while applying lower priority to background processes.<br>Newly-spawned sub-processes inherit the priorities.<br>The default background and foreground niceness is defined in .<br>This last feature is key to getting the highest boost in responsiveness and games.Through internal testing, this noticeably improves desktopresponsiveness for low end hardware like the Raspberry Pi, as well asthe smoothness and framerates of games and VR overall.<br>We had thesmoothest VR gaming experience with this.I would really love to see some numbers.<br>Did you measured the difference?QA was measuring for framerate differences, but nothing comprehensive like Phoronix does.<br>I'm not convinced it would be the best way to compare responsiveness though.<br>Maybe if it's tracking the framerate jitter and average number of framerate drops.Only the window manager has knowledge of what process has the active focus, so pop-shell provides that information.Are you interested in making this available to all desktop environments? It doesn't  to be tied specifically to pop-shell; utilities like devilspie2 receive notifications whenever the active window changes and can run scripts for a window when it receives focus.I'm not familiar with devilspie2.<br>If there is a better way to get knowledge of the focused window, then I'd like to know.Is it possible to measure presentation time?Input to frame and vblank varianceI don't personally have experience with this.<br>It'd be better if someone more experienced with this kind of profiling could help out with measuring and tuning what's here.Isn't the background and scheduler changes something that feralgamemode did?This works differently.With the scheduler tweaks, Feral gamemode requires using a non-standard kernel that offers BFS or MuQSS CPU schedulers as an alternative to the CFS scheduler in the mainline kernel so that it can apply the  policy to the process that requested it.<br>This instead makes changes directly to CFS scheduler's own parameters to the defaults that the Zen kernel uses to get low latency scheduling with the mainline kernel's scheduler, and it doesn't apply any sort of realtime policies — only altering niceness.I'm not aware of gamemode altering background processes, but it does require games to integrate and dynamically link gamemode support into their binaries to have their priorities adjusted.<br>This service tweaks the entire OS without needing game support.<br>It just requires that you have a window manager to keep the service in the know about which process is the foreground process.<br>Processes can't and don't have to request to be prioritized themselves.It's also written in Rust, so should be easier to contribute to than C.This is very cool and something I've been looking for.<br>I hope it gets expanded to work with other desktop environments.<br>I love the idea of shifting the priority of desktop applications, I just don't want to be limited to using it with one desktop.All it would take is for someone with experience with that desktop environment to insert a single DBus call when windows are focused.<br>GNOME Shell provides this info to extensions, so support is easier there.Pop has full control over top to bottom integration of the entire OS stack, so I can at least provide a solution that works out of the box in our OS.Will this be at all relevant for desktop users or just for laptops? How does this related to the existing system76-power package? Very exciting!Yes, this is relevant for all systems.<br>Low end devices will get the most improvement for desktop responsiveness.There's no relation to system76-power.<br>Power controls CPU power profiles, PCI device runtime power management, and graphics switching.<br>This changes scheduler latencies and process priorities.I've been digging into optimizing my laptop with kernel tuning and tweaking the I/O scheduler.There are many differences of opinion on what works best. If you're interested in learning more then check out the following links:So does this work only is you're using CFS?The CFS tweak only works with CFSHow does this interact with preempt=full for low latency audio?It would just be complimentary to what you already have.so how does one get this exactly, through the pop shop or something? im new to linux so sorry if it sounds sillyIt's just available as an OS update.<br>Logging out and logging back in after installing the update will get it working.MembersOnlineRecently released in Pop!_OS is .<br>It is a system service which automatically tunes the CFS scheduler for low latency scheduling while on AC; provides configurable automatic process priority assignments; and when used with the , foreground process management is activated to assign higher priority to the focused window and its sub-processes, while assigning lower priority to background processes.Through internal testing, this noticeably improves desktop responsiveness for low end hardware like the Raspberry Pi, as well as the smoothness and framerates of games and VR overall.<br>We had the smoothest VR gaming experience with this.The service watches upower (via ) for battery status events.<br>When plugged into AC, it'll tweak the CFS scheduler's parameters to enable low latency scheduling to match the settings in the Zen kernel.<br>When disconnected from AC, it reverts to the mainline kernel defaults to save battery.<br>This affects how often the CPU scheduler switches between threads, with low latency scheduling switching more often.It also does a periodic scan of processes in  and applies priorities based on assignments given by RON configuration files in  and .<br>There are some recommended defaults being distributed with it to use as an example.<br>Each periodic scan is performed once per minute, and takes a couple milliseconds to complete.<br>Common compiler processes are on the low priority list.Foreground process management is activated when pop-shell starts sending foreground process IDs to the service.<br>Only the window manager has knowledge of what process has the active focus, so pop-shell provides that information.<br>The service scans  to get the PPID (parent PID) of each process, records all processes which have the focused window as their ancestor, and then applies a higher priority to the foreground process and its descendants, while applying lower priority to background processes.<br>Newly-spawned sub-processes inherit the priorities.<br>The default background and foreground niceness is defined in .<br>This last feature is key to getting the highest boost in responsiveness and games.Through internal testing, this noticeably improves desktopresponsiveness for low end hardware like the Raspberry Pi, as well asthe smoothness and framerates of games and VR overall.<br>We had thesmoothest VR gaming experience with this.I would really love to see some numbers.<br>Did you measured the difference?QA was measuring for framerate differences, but nothing comprehensive like Phoronix does.<br>I'm not convinced it would be the best way to compare responsiveness though.<br>Maybe if it's tracking the framerate jitter and average number of framerate drops.Only the window manager has knowledge of what process has the active focus, so pop-shell provides that information.Are you interested in making this available to all desktop environments? It doesn't  to be tied specifically to pop-shell; utilities like devilspie2 receive notifications whenever the active window changes and can run scripts for a window when it receives focus.I'm not familiar with devilspie2.<br>If there is a better way to get knowledge of the focused window, then I'd like to know.Is it possible to measure presentation time?Input to frame and vblank varianceI don't personally have experience with this.<br>It'd be better if someone more experienced with this kind of profiling could help out with measuring and tuning what's here.Isn't the background and scheduler changes something that feralgamemode did?This works differently.With the scheduler tweaks, Feral gamemode requires using a non-standard kernel that offers BFS or MuQSS CPU schedulers as an alternative to the CFS scheduler in the mainline kernel so that it can apply the  policy to the process that requested it.<br>This instead makes changes directly to CFS scheduler's own parameters to the defaults that the Zen kernel uses to get low latency scheduling with the mainline kernel's scheduler, and it doesn't apply any sort of realtime policies — only altering niceness.I'm not aware of gamemode altering background processes, but it does require games to integrate and dynamically link gamemode support into their binaries to have their priorities adjusted.<br>This service tweaks the entire OS without needing game support.<br>It just requires that you have a window manager to keep the service in the know about which process is the foreground process.<br>Processes can't and don't have to request to be prioritized themselves.It's also written in Rust, so should be easier to contribute to than C.This is very cool and something I've been looking for.<br>I hope it gets expanded to work with other desktop environments.<br>I love the idea of shifting the priority of desktop applications, I just don't want to be limited to using it with one desktop.All it would take is for someone with experience with that desktop environment to insert a single DBus call when windows are focused.<br>GNOME Shell provides this info to extensions, so support is easier there.Pop has full control over top to bottom integration of the entire OS stack, so I can at least provide a solution that works out of the box in our OS.Will this be at all relevant for desktop users or just for laptops? How does this related to the existing system76-power package? Very exciting!Yes, this is relevant for all systems.<br>Low end devices will get the most improvement for desktop responsiveness.There's no relation to system76-power.<br>Power controls CPU power profiles, PCI device runtime power management, and graphics switching.<br>This changes scheduler latencies and process priorities.I've been digging into optimizing my laptop with kernel tuning and tweaking the I/O scheduler.There are many differences of opinion on what works best. If you're interested in learning more then check out the following links:So does this work only is you're using CFS?The CFS tweak only works with CFSHow does this interact with preempt=full for low latency audio?It would just be complimentary to what you already have.so how does one get this exactly, through the pop shop or something? im new to linux so sorry if it sounds sillyIt's just available as an OS update.<br>Logging out and logging back in after installing the update will get it working.MembersOnlineRecently released in Pop!_OS is .<br>It is a system service which automatically tunes the CFS scheduler for low latency scheduling while on AC; provides configurable automatic process priority assignments; and when used with the , foreground process management is activated to assign higher priority to the focused window and its sub-processes, while assigning lower priority to background processes.Through internal testing, this noticeably improves desktop responsiveness for low end hardware like the Raspberry Pi, as well as the smoothness and framerates of games and VR overall.<br>We had the smoothest VR gaming experience with this.The service watches upower (via ) for battery status events.<br>When plugged into AC, it'll tweak the CFS scheduler's parameters to enable low latency scheduling to match the settings in the Zen kernel.<br>When disconnected from AC, it reverts to the mainline kernel defaults to save battery.<br>This affects how often the CPU scheduler switches between threads, with low latency scheduling switching more often.It also does a periodic scan of processes in  and applies priorities based on assignments given by RON configuration files in  and .<br>There are some recommended defaults being distributed with it to use as an example.<br>Each periodic scan is performed once per minute, and takes a couple milliseconds to complete.<br>Common compiler processes are on the low priority list.Foreground process management is activated when pop-shell starts sending foreground process IDs to the service.<br>Only the window manager has knowledge of what process has the active focus, so pop-shell provides that information.<br>The service scans  to get the PPID (parent PID) of each process, records all processes which have the focused window as their ancestor, and then applies a higher priority to the foreground process and its descendants, while applying lower priority to background processes.<br>Newly-spawned sub-processes inherit the priorities.<br>The default background and foreground niceness is defined in .<br>This last feature is key to getting the highest boost in responsiveness and games.Through internal testing, this noticeably improves desktopresponsiveness for low end hardware like the Raspberry Pi, as well asthe smoothness and framerates of games and VR overall.<br>We had thesmoothest VR gaming experience with this.I would really love to see some numbers.<br>Did you measured the difference?QA was measuring for framerate differences, but nothing comprehensive like Phoronix does.<br>I'm not convinced it would be the best way to compare responsiveness though.<br>Maybe if it's tracking the framerate jitter and average number of framerate drops.Only the window manager has knowledge of what process has the active focus, so pop-shell provides that information.Are you interested in making this available to all desktop environments? It doesn't  to be tied specifically to pop-shell; utilities like devilspie2 receive notifications whenever the active window changes and can run scripts for a window when it receives focus.I'm not familiar with devilspie2.<br>If there is a better way to get knowledge of the focused window, then I'd like to know.Is it possible to measure presentation time?Input to frame and vblank varianceI don't personally have experience with this.<br>It'd be better if someone more experienced with this kind of profiling could help out with measuring and tuning what's here.Isn't the background and scheduler changes something that feralgamemode did?This works differently.With the scheduler tweaks, Feral gamemode requires using a non-standard kernel that offers BFS or MuQSS CPU schedulers as an alternative to the CFS scheduler in the mainline kernel so that it can apply the  policy to the process that requested it.<br>This instead makes changes directly to CFS scheduler's own parameters to the defaults that the Zen kernel uses to get low latency scheduling with the mainline kernel's scheduler, and it doesn't apply any sort of realtime policies — only altering niceness.I'm not aware of gamemode altering background processes, but it does require games to integrate and dynamically link gamemode support into their binaries to have their priorities adjusted.<br>This service tweaks the entire OS without needing game support.<br>It just requires that you have a window manager to keep the service in the know about which process is the foreground process.<br>Processes can't and don't have to request to be prioritized themselves.It's also written in Rust, so should be easier to contribute to than C.This is very cool and something I've been looking for.<br>I hope it gets expanded to work with other desktop environments.<br>I love the idea of shifting the priority of desktop applications, I just don't want to be limited to using it with one desktop.All it would take is for someone with experience with that desktop environment to insert a single DBus call when windows are focused.<br>GNOME Shell provides this info to extensions, so support is easier there.Pop has full control over top to bottom integration of the entire OS stack, so I can at least provide a solution that works out of the box in our OS.Will this be at all relevant for desktop users or just for laptops? How does this related to the existing system76-power package? Very exciting!Yes, this is relevant for all systems.<br>Low end devices will get the most improvement for desktop responsiveness.There's no relation to system76-power.<br>Power controls CPU power profiles, PCI device runtime power management, and graphics switching.<br>This changes scheduler latencies and process priorities.I've been digging into optimizing my laptop with kernel tuning and tweaking the I/O scheduler.There are many differences of opinion on what works best. If you're interested in learning more then check out the following links:So does this work only is you're using CFS?The CFS tweak only works with CFSHow does this interact with preempt=full for low latency audio?It would just be complimentary to what you already have.so how does one get this exactly, through the pop shop or something? im new to linux so sorry if it sounds sillyIt's just available as an OS update.<br>Logging out and logging back in after installing the update will get it working.MembersOnlineRecently released in Pop!_OS is .<br>It is a system service which automatically tunes the CFS scheduler for low latency scheduling while on AC; provides configurable automatic process priority assignments; and when used with the , foreground process management is activated to assign higher priority to the focused window and its sub-processes, while assigning lower priority to background processes.Through internal testing, this noticeably improves desktop responsiveness for low end hardware like the Raspberry Pi, as well as the smoothness and framerates of games and VR overall.<br>We had the smoothest VR gaming experience with this.The service watches upower (via ) for battery status events.<br>When plugged into AC, it'll tweak the CFS scheduler's parameters to enable low latency scheduling to match the settings in the Zen kernel.<br>When disconnected from AC, it reverts to the mainline kernel defaults to save battery.<br>This affects how often the CPU scheduler switches between threads, with low latency scheduling switching more often.It also does a periodic scan of processes in  and applies priorities based on assignments given by RON configuration files in  and .<br>There are some recommended defaults being distributed with it to use as an example.<br>Each periodic scan is performed once per minute, and takes a couple milliseconds to complete.<br>Common compiler processes are on the low priority list.Foreground process management is activated when pop-shell starts sending foreground process IDs to the service.<br>Only the window manager has knowledge of what process has the active focus, so pop-shell provides that information.<br>The service scans  to get the PPID (parent PID) of each process, records all processes which have the focused window as their ancestor, and then applies a higher priority to the foreground process and its descendants, while applying lower priority to background processes.<br>Newly-spawned sub-processes inherit the priorities.<br>The default background and foreground niceness is defined in .<br>This last feature is key to getting the highest boost in responsiveness and games.Through internal testing, this noticeably improves desktopresponsiveness for low end hardware like the Raspberry Pi, as well asthe smoothness and framerates of games and VR overall.<br>We had thesmoothest VR gaming experience with this.I would really love to see some numbers.<br>Did you measured the difference?QA was measuring for framerate differences, but nothing comprehensive like Phoronix does.<br>I'm not convinced it would be the best way to compare responsiveness though.<br>Maybe if it's tracking the framerate jitter and average number of framerate drops.Only the window manager has knowledge of what process has the active focus, so pop-shell provides that information.Are you interested in making this available to all desktop environments? It doesn't  to be tied specifically to pop-shell; utilities like devilspie2 receive notifications whenever the active window changes and can run scripts for a window when it receives focus.I'm not familiar with devilspie2.<br>If there is a better way to get knowledge of the focused window, then I'd like to know.Is it possible to measure presentation time?Input to frame and vblank varianceI don't personally have experience with this.<br>It'd be better if someone more experienced with this kind of profiling could help out with measuring and tuning what's here.Isn't the background and scheduler changes something that feralgamemode did?This works differently.With the scheduler tweaks, Feral gamemode requires using a non-standard kernel that offers BFS or MuQSS CPU schedulers as an alternative to the CFS scheduler in the mainline kernel so that it can apply the  policy to the process that requested it.<br>This instead makes changes directly to CFS scheduler's own parameters to the defaults that the Zen kernel uses to get low latency scheduling with the mainline kernel's scheduler, and it doesn't apply any sort of realtime policies — only altering niceness.I'm not aware of gamemode altering background processes, but it does require games to integrate and dynamically link gamemode support into their binaries to have their priorities adjusted.<br>This service tweaks the entire OS without needing game support.<br>It just requires that you have a window manager to keep the service in the know about which process is the foreground process.<br>Processes can't and don't have to request to be prioritized themselves.It's also written in Rust, so should be easier to contribute to than C.This is very cool and something I've been looking for.<br>I hope it gets expanded to work with other desktop environments.<br>I love the idea of shifting the priority of desktop applications, I just don't want to be limited to using it with one desktop.All it would take is for someone with experience with that desktop environment to insert a single DBus call when windows are focused.<br>GNOME Shell provides this info to extensions, so support is easier there.Pop has full control over top to bottom integration of the entire OS stack, so I can at least provide a solution that works out of the box in our OS.Will this be at all relevant for desktop users or just for laptops? How does this related to the existing system76-power package? Very exciting!Yes, this is relevant for all systems.<br>Low end devices will get the most improvement for desktop responsiveness.There's no relation to system76-power.<br>Power controls CPU power profiles, PCI device runtime power management, and graphics switching.<br>This changes scheduler latencies and process priorities.I've been digging into optimizing my laptop with kernel tuning and tweaking the I/O scheduler.There are many differences of opinion on what works best. If you're interested in learning more then check out the following links:So does this work only is you're using CFS?The CFS tweak only works with CFSHow does this interact with preempt=full for low latency audio?It would just be complimentary to what you already have.so how does one get this exactly, through the pop shop or something? im new to linux so sorry if it sounds sillyIt's just available as an OS update.<br>Logging out and logging back in after installing the update will get it working.MembersOnlineRecently released in Pop!_OS is .<br>It is a system service which automatically tunes the CFS scheduler for low latency scheduling while on AC; provides configurable automatic process priority assignments; and when used with the , foreground process management is activated to assign higher priority to the focused window and its sub-processes, while assigning lower priority to background processes.Through internal testing, this noticeably improves desktop responsiveness for low end hardware like the Raspberry Pi, as well as the smoothness and framerates of games and VR overall.<br>We had the smoothest VR gaming experience with this.The service watches upower (via ) for battery status events.<br>When plugged into AC, it'll tweak the CFS scheduler's parameters to enable low latency scheduling to match the settings in the Zen kernel.<br>When disconnected from AC, it reverts to the mainline kernel defaults to save battery.<br>This affects how often the CPU scheduler switches between threads, with low latency scheduling switching more often.It also does a periodic scan of processes in  and applies priorities based on assignments given by RON configuration files in  and .<br>There are some recommended defaults being distributed with it to use as an example.<br>Each periodic scan is performed once per minute, and takes a couple milliseconds to complete.<br>Common compiler processes are on the low priority list.Foreground process management is activated when pop-shell starts sending foreground process IDs to the service.<br>Only the window manager has knowledge of what process has the active focus, so pop-shell provides that information.<br>The service scans  to get the PPID (parent PID) of each process, records all processes which have the focused window as their ancestor, and then applies a higher priority to the foreground process and its descendants, while applying lower priority to background processes.<br>Newly-spawned sub-processes inherit the priorities.<br>The default background and foreground niceness is defined in .<br>This last feature is key to getting the highest boost in responsiveness and games.Through internal testing, this noticeably improves desktopresponsiveness for low end hardware like the Raspberry Pi, as well asthe smoothness and framerates of games and VR overall.<br>We had thesmoothest VR gaming experience with this.I would really love to see some numbers.<br>Did you measured the difference?QA was measuring for framerate differences, but nothing comprehensive like Phoronix does.<br>I'm not convinced it would be the best way to compare responsiveness though.<br>Maybe if it's tracking the framerate jitter and average number of framerate drops.Only the window manager has knowledge of what process has the active focus, so pop-shell provides that information.Are you interested in making this available to all desktop environments? It doesn't  to be tied specifically to pop-shell; utilities like devilspie2 receive notifications whenever the active window changes and can run scripts for a window when it receives focus.I'm not familiar with devilspie2.<br>If there is a better way to get knowledge of the focused window, then I'd like to know.Is it possible to measure presentation time?Input to frame and vblank varianceI don't personally have experience with this.<br>It'd be better if someone more experienced with this kind of profiling could help out with measuring and tuning what's here.Isn't the background and scheduler changes something that feralgamemode did?This works differently.With the scheduler tweaks, Feral gamemode requires using a non-standard kernel that offers BFS or MuQSS CPU schedulers as an alternative to the CFS scheduler in the mainline kernel so that it can apply the  policy to the process that requested it.<br>This instead makes changes directly to CFS scheduler's own parameters to the defaults that the Zen kernel uses to get low latency scheduling with the mainline kernel's scheduler, and it doesn't apply any sort of realtime policies — only altering niceness.I'm not aware of gamemode altering background processes, but it does require games to integrate and dynamically link gamemode support into their binaries to have their priorities adjusted.<br>This service tweaks the entire OS without needing game support.<br>It just requires that you have a window manager to keep the service in the know about which process is the foreground process.<br>Processes can't and don't have to request to be prioritized themselves.It's also written in Rust, so should be easier to contribute to than C.This is very cool and something I've been looking for.<br>I hope it gets expanded to work with other desktop environments.<br>I love the idea of shifting the priority of desktop applications, I just don't want to be limited to using it with one desktop.All it would take is for someone with experience with that desktop environment to insert a single DBus call when windows are focused.<br>GNOME Shell provides this info to extensions, so support is easier there.Pop has full control over top to bottom integration of the entire OS stack, so I can at least provide a solution that works out of the box in our OS.Will this be at all relevant for desktop users or just for laptops? How does this related to the existing system76-power package? Very exciting!Yes, this is relevant for all systems.<br>Low end devices will get the most improvement for desktop responsiveness.There's no relation to system76-power.<br>Power controls CPU power profiles, PCI device runtime power management, and graphics switching.<br>This changes scheduler latencies and process priorities.I've been digging into optimizing my laptop with kernel tuning and tweaking the I/O scheduler.There are many differences of opinion on what works best. If you're interested in learning more then check out the following links:So does this work only is you're using CFS?The CFS tweak only works with CFSHow does this interact with preempt=full for low latency audio?It would just be complimentary to what you already have.so how does one get this exactly, through the pop shop or something? im new to linux so sorry if it sounds sillyIt's just available as an OS update.<br>Logging out and logging back in after installing the update will get it working.MembersOnlineRecently released in Pop!_OS is .<br>It is a system service which automatically tunes the CFS scheduler for low latency scheduling while on AC; provides configurable automatic process priority assignments; and when used with the , foreground process management is activated to assign higher priority to the focused window and its sub-processes, while assigning lower priority to background processes.Through internal testing, this noticeably improves desktop responsiveness for low end hardware like the Raspberry Pi, as well as the smoothness and framerates of games and VR overall.<br>We had the smoothest VR gaming experience with this.The service watches upower (via ) for battery status events.<br>When plugged into AC, it'll tweak the CFS scheduler's parameters to enable low latency scheduling to match the settings in the Zen kernel.<br>When disconnected from AC, it reverts to the mainline kernel defaults to save battery.<br>This affects how often the CPU scheduler switches between threads, with low latency scheduling switching more often.It also does a periodic scan of processes in  and applies priorities based on assignments given by RON configuration files in  and .<br>There are some recommended defaults being distributed with it to use as an example.<br>Each periodic scan is performed once per minute, and takes a couple milliseconds to complete.<br>Common compiler processes are on the low priority list.Foreground process management is activated when pop-shell starts sending foreground process IDs to the service.<br>Only the window manager has knowledge of what process has the active focus, so pop-shell provides that information.<br>The service scans  to get the PPID (parent PID) of each process, records all processes which have the focused window as their ancestor, and then applies a higher priority to the foreground process and its descendants, while applying lower priority to background processes.<br>Newly-spawned sub-processes inherit the priorities.<br>The default background and foreground niceness is defined in .<br>This last feature is key to getting the highest boost in responsiveness and games.Through internal testing, this noticeably improves desktopresponsiveness for low end hardware like the Raspberry Pi, as well asthe smoothness and framerates of games and VR overall.<br>We had thesmoothest VR gaming experience with this.I would really love to see some numbers.<br>Did you measured the difference?QA was measuring for framerate differences, but nothing comprehensive like Phoronix does.<br>I'm not convinced it would be the best way to compare responsiveness though.<br>Maybe if it's tracking the framerate jitter and average number of framerate drops.Only the window manager has knowledge of what process has the active focus, so pop-shell provides that information.Are you interested in making this available to all desktop environments? It doesn't  to be tied specifically to pop-shell; utilities like devilspie2 receive notifications whenever the active window changes and can run scripts for a window when it receives focus.I'm not familiar with devilspie2.<br>If there is a better way to get knowledge of the focused window, then I'd like to know.Is it possible to measure presentation time?Input to frame and vblank varianceI don't personally have experience with this.<br>It'd be better if someone more experienced with this kind of profiling could help out with measuring and tuning what's here.Isn't the background and scheduler changes something that feralgamemode did?This works differently.With the scheduler tweaks, Feral gamemode requires using a non-standard kernel that offers BFS or MuQSS CPU schedulers as an alternative to the CFS scheduler in the mainline kernel so that it can apply the  policy to the process that requested it.<br>This instead makes changes directly to CFS scheduler's own parameters to the defaults that the Zen kernel uses to get low latency scheduling with the mainline kernel's scheduler, and it doesn't apply any sort of realtime policies — only altering niceness.I'm not aware of gamemode altering background processes, but it does require games to integrate and dynamically link gamemode support into their binaries to have their priorities adjusted.<br>This service tweaks the entire OS without needing game support.<br>It just requires that you have a window manager to keep the service in the know about which process is the foreground process.<br>Processes can't and don't have to request to be prioritized themselves.It's also written in Rust, so should be easier to contribute to than C.This is very cool and something I've been looking for.<br>I hope it gets expanded to work with other desktop environments.<br>I love the idea of shifting the priority of desktop applications, I just don't want to be limited to using it with one desktop.All it would take is for someone with experience with that desktop environment to insert a single DBus call when windows are focused.<br>GNOME Shell provides this info to extensions, so support is easier there.Pop has full control over top to bottom integration of the entire OS stack, so I can at least provide a solution that works out of the box in our OS.Will this be at all relevant for desktop users or just for laptops? How does this related to the existing system76-power package? Very exciting!Yes, this is relevant for all systems.<br>Low end devices will get the most improvement for desktop responsiveness.There's no relation to system76-power.<br>Power controls CPU power profiles, PCI device runtime power management, and graphics switching.<br>This changes scheduler latencies and process priorities.I've been digging into optimizing my laptop with kernel tuning and tweaking the I/O scheduler.There are many differences of opinion on what works best. If you're interested in learning more then check out the following links:So does this work only is you're using CFS?The CFS tweak only works with CFSHow does this interact with preempt=full for low latency audio?It would just be complimentary to what you already have.so how does one get this exactly, through the pop shop or something? im new to linux so sorry if it sounds sillyIt's just available as an OS update.<br>Logging out and logging back in after installing the update will get it working.MembersOnline</p>
