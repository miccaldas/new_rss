[
{"title": "\n", "links": "/", "content": "Three months ago, I was looking into building coverage for eBPF programs.", "images": []},
{"title": "\n", "links": "https://leodido.dev/about", "content": "That\u2019s how ", "images": []},
{"title": "\n", "links": "https://leodido.dev/projects", "content": " was born.", "images": []},
{"title": "missing", "links": "https://leodido.dev/talks", "content": "I did not want to reinvent the wheel, so I was looking into the existing coverage instrumentation features of LLVM.", "images": []},
{"title": "missing", "links": "https://github.com/leodido", "content": "Among the different options LLVM provides, ", "images": []},
{"title": "missing", "links": "https://twitter.com/leodido", "content": " suddenly appeared very appealing to me.", "images": []},
{"title": "missing", "links": "#", "content": "It\u2019s the most precise type of code coverage. In my opinion, the only one that gives its user a damn clue on what code region of the program is executing. It also helps understand why a particular code branch gets executed.", "images": []},
{"title": "missing", "links": "https://leodido.dev/about", "content": "Using it is pretty straightforward. All resolve to the following steps:", "images": []},
{"title": "missing", "links": "https://leodido.dev/projects", "content": "You now have a beautifully fine-grained coverage report for your C/C++ code.", "images": []},
{"title": "missing", "links": "https://leodido.dev/talks", "content": "But what caught my eye was feeling that this kind of coverage was not using debug info (like ", "images": []},
{"title": "missing", "links": "https://github.com/leodido", "content": " does) at all, but it was using profiling data, coming directly from the darkest parts of LLVM.", "images": []},
{"title": "missing", "links": "https://twitter.com/leodido", "content": "My curiosity took me to some extraordinary places in the LLVM codebase\u2026", "images": []},
{"title": "missing", "links": "#", "content": "I wanted to understand what the ", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/", "content": " was causing.", "images": []},
{"title": "missing", "links": "https://leodido.dev/categories/profiling/", "content": "Also, I wanted to know how I got a binary file (", "images": []},
{"title": "missing", "links": "https://leodido.dev/categories/compilers/", "content": ") without my code writing anything to the disk.", "images": []},
{"title": "missing", "links": "https://leodido.dev/categories/formats/", "content": "And what it contained.", "images": []},
{"title": "missing", "links": "https://leodido.dev/tags/llvm/", "content": ". It contains the globals that the ", "images": []},
{"title": "missing", "links": "https://leodido.dev/tags/clang/", "content": " instruments into your code.", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#fprofile-instr-generate", "content": "But we probably need to move one step at a time to learn something new.", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#generating-the-profraw", "content": "So, this is the dummy C code - ", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#header", "content": " - that I used to walk myself through this study.", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#data", "content": "I compiled it to textual LLVM IR:", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#counters", "content": "In a matter of milliseconds, I was able to look at its intermediate representation:", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#names", "content": "It stands out from what we see that it contains:", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#usage", "content": "Also, all these variables have ELF sections.", "images": []},
{"title": "missing", "links": "https://github.com/elastic/bpfcov", "content": "The ", "images": []},
{"title": "missing", "links": "https://clang.llvm.org/docs/SourceBasedCodeCoverage.html", "content": " variables end up into the ", "images": []},
{"title": "missing", "links": "#fprofile-instr-generate", "content": " section.\nThe ", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#data", "content": " variables end up into the ", "images": []},
{"title": "missing", "links": "profile-instr-generate.png", "content": " section.\nThe ", "images": []},
{"title": "missing", "links": "#generating-the-profraw", "content": " variable ends up into the ", "images": []},
{"title": "missing", "links": "https://github.com/llvm/llvm-project/blob/main/compiler-rt/lib/profile/InstrProfilingFile.c", "content": " section.", "images": []},
{"title": "missing", "links": "https://github.com/llvm/llvm-project/blob/b7fd91c84b4eea5324d9757243387280f4284236/compiler-rt/lib/profile/InstrProfilingFile.c#L995", "content": "But what ", "images": []},
{"title": "missing", "links": "https://github.com/llvm/llvm-project/blob/b7fd91c84b4eea5324d9757243387280f4284236/compiler-rt/lib/profile/InstrProfilingFile.c#L1017", "content": " variables are?", "images": []},
{"title": "missing", "links": "https://github.com/llvm/llvm-project/blob/b7fd91c84b4eea5324d9757243387280f4284236/compiler-rt/lib/profile/InstrProfilingFile.c#L1051", "content": "The section names helped me here: they are the ", "images": []},
{"title": "missing", "links": "https://github.com/llvm/llvm-project/blob/b7fd91c84b4eea5324d9757243387280f4284236/compiler-rt/lib/profile/InstrProfilingFile.c#L480", "content": " used by LLVM for instrumenting our code for ", "images": []},
{"title": "missing", "links": "https://github.com/llvm/llvm-project/blob/e356027016c6365b3d8924f54c33e2c63d931492/compiler-rt/lib/profile/InstrProfilingWriter.c#L257", "content": "!", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#header", "content": "Scrolling down into the LLVM IR, we see they\u2019re getting incremented (", "images": []},
{"title": "missing", "links": "https://github.com/llvm/llvm-project/blob/e356027016c6365b3d8924f54c33e2c63d931492/compiler-rt/lib/profile/InstrProfilingInternal.h#L41-L56", "content": ", ", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#header", "content": ", ", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#data", "content": " instructions sequence) at the correct spots:", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#counters", "content": "We now know why the ", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#names", "content": " array has size 3 (see ", "images": []},
{"title": "missing", "links": "#header", "content": "): LLVM instrumented one counter for the ", "images": []},
{"title": "missing", "links": "https://github.com/llvm/llvm-project/blob/b72b56016a6b586a22a49f145c924c03e4239b1d/llvm/include/llvm/ProfileData/InstrProfData.inc#L121-L141", "content": " function\u2019s entry, one for the ", "images": []},
{"title": "missing", "links": "profraw-header.png", "content": " block, while the last one regards the ", "images": []},
{"title": "missing", "links": "#data", "content": " block.", "images": []},
{"title": "missing", "links": "profraw-data.png", "content": "We also know that we have a total of 5 counters, given the ", "images": []},
{"title": "missing", "links": "#counters", "content": " and ", "images": []},
{"title": "missing", "links": "#names", "content": " have both size 1.", "images": []},
{"title": "missing", "links": "profraw-names.png", "content": "Verifying this is just a matter of obtaining our program binary\u2026", "images": []},
{"title": "missing", "links": "#usage", "content": "And playing with ", "images": []},
{"title": "missing", "links": "https://twitter.com/leodido", "content": ":", "images": []},
{"title": "missing", "links": "https://twitter.com/leodido", "content": "The output here helps us confirm that we have 5 total counters of 8 bytes each, starting at address ", "images": []},
{"title": "missing", "links": "https://github.com/leodido", "content": " and ending at ", "images": []},
{"title": "missing", "links": "atom.xml", "content": ".", "images": []},
{"title": "missing", "links": "missing", "content": "In fact, $c138 - c110 = 28$, which means 40 bytes in decimal base (ie., $8 * 5$).", "images": []},
{"title": "missing", "links": "missing", "content": "What about the ", "images": []},
{"title": "missing", "links": "missing", "content": " variables instead?", "images": []},
{"title": "missing", "links": "missing", "content": "At the moment, all you need to know is that those are structs containing data about the function they refer to and the instrumented counters for it.", "images": []},
{"title": "missing", "links": "missing", "content": "I hope the following image clarifies the relationship. Anyways, we\u2019ll dig deeper into the ", "images": []},
{"title": "missing", "links": "missing", "content": " variables ", "images": []},
{"title": "missing", "links": "missing", "content": ".", "images": []},
{"title": "missing", "links": "missing", "content": "At this point, I still didn\u2019t know ", "images": []},
{"title": "missing", "links": "missing", "content": " the ", "images": []},
{"title": "missing", "links": "missing", "content": " file got created every time I executed my binary.", "images": []},
{"title": "missing", "links": "missing", "content": "I came back to the LLVM source code. It\u2019s incredible the superpowers that reading the source gives you\u2026", "images": []},
{"title": "missing", "links": "missing", "content": "I found ", "images": []},
{"title": "missing", "links": "missing", "content": ".", "images": []},
{"title": "missing", "links": "missing", "content": "Long story short: the code in this LLVM source file implements the ", "images": []},
{"title": "missing", "links": "missing", "content": ", which means it is responsible for gathering all the data from the variables (counters, data, etc.) we\u2019ve seen and flushing them out in the ", "images": []},
{"title": "missing", "links": "missing", "content": " file.", "images": []},
{"title": "missing", "links": "missing", "content": "While looking at it, I suddenly noticed the ", "images": []},
{"title": "missing", "links": "missing", "content": " function.", "images": []},
{"title": "missing", "links": "missing", "content": "It gets invoked by the profiling runtime initialization hook to get the filename of the profraw to create. Either from an environment variable (", "images": []},
{"title": "missing", "links": "missing", "content": ") or using the default one (", "images": []},
{"title": "missing", "links": "missing", "content": "). Finally, it calls the C library function ", "images": []},
{"title": "missing", "links": "missing", "content": ". Which will cause the ", "images": []},
{"title": "missing", "links": "missing", "content": " function to be invoked when the program terminates.", "images": []},
{"title": "missing", "links": "missing", "content": "Thus, I also noticed the ", "images": []},
{"title": "missing", "links": "missing", "content": " function.", "images": []},
{"title": "missing", "links": "missing", "content": "The main thing this function does is to invoke ", "images": []},
{"title": "missing", "links": "missing", "content": ". Which, in turn, calls ", "images": []},
{"title": "missing", "links": "missing", "content": " ", "images": []},
{"title": "missing", "links": "missing", "content": ".", "images": []},
{"title": "missing", "links": "missing", "content": "It\u2019s again time to verify with ", "images": []},
{"title": "missing", "links": "missing", "content": ".", "images": []},
{"title": "missing", "links": "missing", "content": "Our ELF got flooded by ", "images": []},
{"title": "missing", "links": "missing", "content": " functions.", "images": []},
{"title": "missing", "links": "missing", "content": "Seeing all those symbols in the ELF made me 100% sure this is how LLVM makes our binary open the ", "images": []},
{"title": "missing", "links": "missing", "content": " file as soon it executes. In this way, it also makes our program automatically dump the profile data when it terminates.", "images": []},
{"title": "missing", "links": "missing", "content": "Coming back to the ", "images": []},
{"title": "missing", "links": "missing", "content": " function implementation (in the ", "images": []},
{"title": "missing", "links": "missing", "content": " source file), we instead discover ", "images": []},
{"title": "missing", "links": "missing", "content": " it dumps into ", "images": []},
{"title": "missing", "links": "missing", "content": ". It\u2019s while doing so that we understand what a profraw file contains.", "images": []},
{"title": "missing", "links": "missing", "content": "Such a function", "images": []},
{"title": "missing", "links": "missing", "content": ":", "images": []},
{"title": "missing", "links": "missing", "content": "All these moving parts are written using the ", "images": []},
{"title": "missing", "links": "missing", "content": " data structure", "images": []},
{"title": "missing", "links": "missing", "content": ".", "images": []},
{"title": "missing", "links": "missing", "content": "So, we can finally assert what a profraw binary file is composed by:", "images": []},
{"title": "missing", "links": "missing", "content": "The ", "images": []},
{"title": "missing", "links": "missing", "content": " macro at ", "images": []},
{"title": "missing", "links": "missing", "content": " defines the parts composing the header of the profraw file. Which are:", "images": []},
{"title": "missing", "links": "missing", "content": "With the following table I tried to summarize the header\u2019s content:", "images": []},
{"title": "missing", "links": "missing", "content": "But probably an image is worth a thousand words.", "images": []},
{"title": "missing", "links": "missing", "content": "This is the ", "images": []},
{"title": "missing", "links": "missing", "content": " file after executing ", "images": []},
{"title": "missing", "links": "missing", "content": ":", "images": []},
{"title": "missing", "links": "missing", "content": "We can see that its header is composed of:", "images": []},
{"title": "missing", "links": "missing", "content": "Exactly the way we were now expecting it.", "images": []},
{"title": "missing", "links": "missing", "content": "Focusing on the data part, I\u2019ve highlighted with (orange) rectangles the 3 ", "images": []},
{"title": "missing", "links": "missing", "content": " global variables.", "images": []},
{"title": "missing", "links": "missing", "content": "Each of the ", "images": []},
{"title": "missing", "links": "missing", "content": " contains 6 parts:", "images": []},
{"title": "missing", "links": "missing", "content": "After the data parte comes the counters part.", "images": []},
{"title": "missing", "links": "missing", "content": "It just is a serialization of what the variables in the ", "images": []},
{"title": "missing", "links": "missing", "content": " ELF section contains.", "images": []},
{"title": "missing", "links": "missing", "content": "In fact, in this screenshot you can see underlined (with waves, in shades of cyan/blue):", "images": []},
{"title": "missing", "links": "missing", "content": "Finally, the ", "images": []},
{"title": "missing", "links": "missing", "content": " variable populates the last part of the profraw file.", "images": []},
{"title": "missing", "links": "missing", "content": "Here (in grey) you can see its content", "images": []},
{"title": "missing", "links": "missing", "content": ", padded with a ", "images": []},
{"title": "missing", "links": "missing", "content": " byte (the one circled) at the end to align the profraw file size to be multiple of 8.", "images": []},
{"title": "missing", "links": "missing", "content": "It\u2019s time to use the ", "images": []},
{"title": "missing", "links": "missing", "content": " file now:", "images": []},
{"title": "missing", "links": "missing", "content": "Isn\u2019t it cool?", "images": []},
{"title": "missing", "links": "missing", "content": "There\u2019s more you can do with profraw files and the LLVM toolchain, indeed. But showing that was not the goal of this post.", "images": []},
{"title": "missing", "links": "missing", "content": "I hope you now have a better understanding of what profraw files are.", "images": []}
][
{"title": "\n", "links": "/", "content": "Three months ago, I was looking into building coverage for eBPF programs.", "images": []},
{"title": "\n", "links": "https://leodido.dev/about", "content": "That\u2019s how ", "images": []},
{"title": "\n", "links": "https://leodido.dev/projects", "content": " was born.", "images": []},
{"title": "missing", "links": "https://leodido.dev/talks", "content": "I did not want to reinvent the wheel, so I was looking into the existing coverage instrumentation features of LLVM.", "images": []},
{"title": "missing", "links": "https://github.com/leodido", "content": "Among the different options LLVM provides, ", "images": []},
{"title": "missing", "links": "https://twitter.com/leodido", "content": " suddenly appeared very appealing to me.", "images": []},
{"title": "missing", "links": "#", "content": "It\u2019s the most precise type of code coverage. In my opinion, the only one that gives its user a damn clue on what code region of the program is executing. It also helps understand why a particular code branch gets executed.", "images": []},
{"title": "missing", "links": "https://leodido.dev/about", "content": "Using it is pretty straightforward. All resolve to the following steps:", "images": []},
{"title": "missing", "links": "https://leodido.dev/projects", "content": "You now have a beautifully fine-grained coverage report for your C/C++ code.", "images": []},
{"title": "missing", "links": "https://leodido.dev/talks", "content": "But what caught my eye was feeling that this kind of coverage was not using debug info (like ", "images": []},
{"title": "missing", "links": "https://github.com/leodido", "content": " does) at all, but it was using profiling data, coming directly from the darkest parts of LLVM.", "images": []},
{"title": "missing", "links": "https://twitter.com/leodido", "content": "My curiosity took me to some extraordinary places in the LLVM codebase\u2026", "images": []},
{"title": "missing", "links": "#", "content": "I wanted to understand what the ", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/", "content": " was causing.", "images": []},
{"title": "missing", "links": "https://leodido.dev/categories/profiling/", "content": "Also, I wanted to know how I got a binary file (", "images": []},
{"title": "missing", "links": "https://leodido.dev/categories/compilers/", "content": ") without my code writing anything to the disk.", "images": []},
{"title": "missing", "links": "https://leodido.dev/categories/formats/", "content": "And what it contained.", "images": []},
{"title": "missing", "links": "https://leodido.dev/tags/llvm/", "content": ". It contains the globals that the ", "images": []},
{"title": "missing", "links": "https://leodido.dev/tags/clang/", "content": " instruments into your code.", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#fprofile-instr-generate", "content": "But we probably need to move one step at a time to learn something new.", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#generating-the-profraw", "content": "So, this is the dummy C code - ", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#header", "content": " - that I used to walk myself through this study.", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#data", "content": "I compiled it to textual LLVM IR:", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#counters", "content": "In a matter of milliseconds, I was able to look at its intermediate representation:", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#names", "content": "It stands out from what we see that it contains:", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#usage", "content": "Also, all these variables have ELF sections.", "images": []},
{"title": "missing", "links": "https://github.com/elastic/bpfcov", "content": "The ", "images": []},
{"title": "missing", "links": "https://clang.llvm.org/docs/SourceBasedCodeCoverage.html", "content": " variables end up into the ", "images": []},
{"title": "missing", "links": "#fprofile-instr-generate", "content": " section.\nThe ", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#data", "content": " variables end up into the ", "images": []},
{"title": "missing", "links": "profile-instr-generate.png", "content": " section.\nThe ", "images": []},
{"title": "missing", "links": "#generating-the-profraw", "content": " variable ends up into the ", "images": []},
{"title": "missing", "links": "https://github.com/llvm/llvm-project/blob/main/compiler-rt/lib/profile/InstrProfilingFile.c", "content": " section.", "images": []},
{"title": "missing", "links": "https://github.com/llvm/llvm-project/blob/b7fd91c84b4eea5324d9757243387280f4284236/compiler-rt/lib/profile/InstrProfilingFile.c#L995", "content": "But what ", "images": []},
{"title": "missing", "links": "https://github.com/llvm/llvm-project/blob/b7fd91c84b4eea5324d9757243387280f4284236/compiler-rt/lib/profile/InstrProfilingFile.c#L1017", "content": " variables are?", "images": []},
{"title": "missing", "links": "https://github.com/llvm/llvm-project/blob/b7fd91c84b4eea5324d9757243387280f4284236/compiler-rt/lib/profile/InstrProfilingFile.c#L1051", "content": "The section names helped me here: they are the ", "images": []},
{"title": "missing", "links": "https://github.com/llvm/llvm-project/blob/b7fd91c84b4eea5324d9757243387280f4284236/compiler-rt/lib/profile/InstrProfilingFile.c#L480", "content": " used by LLVM for instrumenting our code for ", "images": []},
{"title": "missing", "links": "https://github.com/llvm/llvm-project/blob/e356027016c6365b3d8924f54c33e2c63d931492/compiler-rt/lib/profile/InstrProfilingWriter.c#L257", "content": "!", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#header", "content": "Scrolling down into the LLVM IR, we see they\u2019re getting incremented (", "images": []},
{"title": "missing", "links": "https://github.com/llvm/llvm-project/blob/e356027016c6365b3d8924f54c33e2c63d931492/compiler-rt/lib/profile/InstrProfilingInternal.h#L41-L56", "content": ", ", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#header", "content": ", ", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#data", "content": " instructions sequence) at the correct spots:", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#counters", "content": "We now know why the ", "images": []},
{"title": "missing", "links": "https://leodido.dev/demystifying-profraw/#names", "content": " array has size 3 (see ", "images": []},
{"title": "missing", "links": "#header", "content": "): LLVM instrumented one counter for the ", "images": []},
{"title": "missing", "links": "https://github.com/llvm/llvm-project/blob/b72b56016a6b586a22a49f145c924c03e4239b1d/llvm/include/llvm/ProfileData/InstrProfData.inc#L121-L141", "content": " function\u2019s entry, one for the ", "images": []},
{"title": "missing", "links": "profraw-header.png", "content": " block, while the last one regards the ", "images": []},
{"title": "missing", "links": "#data", "content": " block.", "images": []},
{"title": "missing", "links": "profraw-data.png", "content": "We also know that we have a total of 5 counters, given the ", "images": []},
{"title": "missing", "links": "#counters", "content": " and ", "images": []},
{"title": "missing", "links": "#names", "content": " have both size 1.", "images": []},
{"title": "missing", "links": "profraw-names.png", "content": "Verifying this is just a matter of obtaining our program binary\u2026", "images": []},
{"title": "missing", "links": "#usage", "content": "And playing with ", "images": []},
{"title": "missing", "links": "https://twitter.com/leodido", "content": ":", "images": []},
{"title": "missing", "links": "https://twitter.com/leodido", "content": "The output here helps us confirm that we have 5 total counters of 8 bytes each, starting at address ", "images": []},
{"title": "missing", "links": "https://github.com/leodido", "content": " and ending at ", "images": []},
{"title": "missing", "links": "atom.xml", "content": ".", "images": []},
{"title": "missing", "links": "missing", "content": "In fact, $c138 - c110 = 28$, which means 40 bytes in decimal base (ie., $8 * 5$).", "images": []},
{"title": "missing", "links": "missing", "content": "What about the ", "images": []},
{"title": "missing", "links": "missing", "content": " variables instead?", "images": []},
{"title": "missing", "links": "missing", "content": "At the moment, all you need to know is that those are structs containing data about the function they refer to and the instrumented counters for it.", "images": []},
{"title": "missing", "links": "missing", "content": "I hope the following image clarifies the relationship. Anyways, we\u2019ll dig deeper into the ", "images": []},
{"title": "missing", "links": "missing", "content": " variables ", "images": []},
{"title": "missing", "links": "missing", "content": ".", "images": []},
{"title": "missing", "links": "missing", "content": "At this point, I still didn\u2019t know ", "images": []},
{"title": "missing", "links": "missing", "content": " the ", "images": []},
{"title": "missing", "links": "missing", "content": " file got created every time I executed my binary.", "images": []},
{"title": "missing", "links": "missing", "content": "I came back to the LLVM source code. It\u2019s incredible the superpowers that reading the source gives you\u2026", "images": []},
{"title": "missing", "links": "missing", "content": "I found ", "images": []},
{"title": "missing", "links": "missing", "content": ".", "images": []},
{"title": "missing", "links": "missing", "content": "Long story short: the code in this LLVM source file implements the ", "images": []},
{"title": "missing", "links": "missing", "content": ", which means it is responsible for gathering all the data from the variables (counters, data, etc.) we\u2019ve seen and flushing them out in the ", "images": []},
{"title": "missing", "links": "missing", "content": " file.", "images": []},
{"title": "missing", "links": "missing", "content": "While looking at it, I suddenly noticed the ", "images": []},
{"title": "missing", "links": "missing", "content": " function.", "images": []},
{"title": "missing", "links": "missing", "content": "It gets invoked by the profiling runtime initialization hook to get the filename of the profraw to create. Either from an environment variable (", "images": []},
{"title": "missing", "links": "missing", "content": ") or using the default one (", "images": []},
{"title": "missing", "links": "missing", "content": "). Finally, it calls the C library function ", "images": []},
{"title": "missing", "links": "missing", "content": ". Which will cause the ", "images": []},
{"title": "missing", "links": "missing", "content": " function to be invoked when the program terminates.", "images": []},
{"title": "missing", "links": "missing", "content": "Thus, I also noticed the ", "images": []},
{"title": "missing", "links": "missing", "content": " function.", "images": []},
{"title": "missing", "links": "missing", "content": "The main thing this function does is to invoke ", "images": []},
{"title": "missing", "links": "missing", "content": ". Which, in turn, calls ", "images": []},
{"title": "missing", "links": "missing", "content": " ", "images": []},
{"title": "missing", "links": "missing", "content": ".", "images": []},
{"title": "missing", "links": "missing", "content": "It\u2019s again time to verify with ", "images": []},
{"title": "missing", "links": "missing", "content": ".", "images": []},
{"title": "missing", "links": "missing", "content": "Our ELF got flooded by ", "images": []},
{"title": "missing", "links": "missing", "content": " functions.", "images": []},
{"title": "missing", "links": "missing", "content": "Seeing all those symbols in the ELF made me 100% sure this is how LLVM makes our binary open the ", "images": []},
{"title": "missing", "links": "missing", "content": " file as soon it executes. In this way, it also makes our program automatically dump the profile data when it terminates.", "images": []},
{"title": "missing", "links": "missing", "content": "Coming back to the ", "images": []},
{"title": "missing", "links": "missing", "content": " function implementation (in the ", "images": []},
{"title": "missing", "links": "missing", "content": " source file), we instead discover ", "images": []},
{"title": "missing", "links": "missing", "content": " it dumps into ", "images": []},
{"title": "missing", "links": "missing", "content": ". It\u2019s while doing so that we understand what a profraw file contains.", "images": []},
{"title": "missing", "links": "missing", "content": "Such a function", "images": []},
{"title": "missing", "links": "missing", "content": ":", "images": []},
{"title": "missing", "links": "missing", "content": "All these moving parts are written using the ", "images": []},
{"title": "missing", "links": "missing", "content": " data structure", "images": []},
{"title": "missing", "links": "missing", "content": ".", "images": []},
{"title": "missing", "links": "missing", "content": "So, we can finally assert what a profraw binary file is composed by:", "images": []},
{"title": "missing", "links": "missing", "content": "The ", "images": []},
{"title": "missing", "links": "missing", "content": " macro at ", "images": []},
{"title": "missing", "links": "missing", "content": " defines the parts composing the header of the profraw file. Which are:", "images": []},
{"title": "missing", "links": "missing", "content": "With the following table I tried to summarize the header\u2019s content:", "images": []},
{"title": "missing", "links": "missing", "content": "But probably an image is worth a thousand words.", "images": []},
{"title": "missing", "links": "missing", "content": "This is the ", "images": []},
{"title": "missing", "links": "missing", "content": " file after executing ", "images": []},
{"title": "missing", "links": "missing", "content": ":", "images": []},
{"title": "missing", "links": "missing", "content": "We can see that its header is composed of:", "images": []},
{"title": "missing", "links": "missing", "content": "Exactly the way we were now expecting it.", "images": []},
{"title": "missing", "links": "missing", "content": "Focusing on the data part, I\u2019ve highlighted with (orange) rectangles the 3 ", "images": []},
{"title": "missing", "links": "missing", "content": " global variables.", "images": []},
{"title": "missing", "links": "missing", "content": "Each of the ", "images": []},
{"title": "missing", "links": "missing", "content": " contains 6 parts:", "images": []},
{"title": "missing", "links": "missing", "content": "After the data parte comes the counters part.", "images": []},
{"title": "missing", "links": "missing", "content": "It just is a serialization of what the variables in the ", "images": []},
{"title": "missing", "links": "missing", "content": " ELF section contains.", "images": []},
{"title": "missing", "links": "missing", "content": "In fact, in this screenshot you can see underlined (with waves, in shades of cyan/blue):", "images": []},
{"title": "missing", "links": "missing", "content": "Finally, the ", "images": []},
{"title": "missing", "links": "missing", "content": " variable populates the last part of the profraw file.", "images": []},
{"title": "missing", "links": "missing", "content": "Here (in grey) you can see its content", "images": []},
{"title": "missing", "links": "missing", "content": ", padded with a ", "images": []},
{"title": "missing", "links": "missing", "content": " byte (the one circled) at the end to align the profraw file size to be multiple of 8.", "images": []},
{"title": "missing", "links": "missing", "content": "It\u2019s time to use the ", "images": []},
{"title": "missing", "links": "missing", "content": " file now:", "images": []},
{"title": "missing", "links": "missing", "content": "Isn\u2019t it cool?", "images": []},
{"title": "missing", "links": "missing", "content": "There\u2019s more you can do with profraw files and the LLVM toolchain, indeed. But showing that was not the goal of this post.", "images": []},
{"title": "missing", "links": "missing", "content": "I hope you now have a better understanding of what profraw files are.", "images": []}
]